<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Xamarin Bindable Property</Title>
      <Description>Creates a binding property for a Xamarin project.</Description>
      <Author>Mohammed Adenwala</Author>
      <Shortcut>propbp</Shortcut>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>PropType</ID>
          <ToolTip>Replace with a property type.</ToolTip>
          <Default>string</Default>
        </Literal>
        <Literal>
          <ID>PropName</ID>
          <ToolTip>Replace with a property name.</ToolTip>
          <Default>MyPropertyName</Default>
        </Literal>
        <Literal default="true" Editable="false">
          <ID>classname</ID>
          <ToolTip>Class name</ToolTip>
          <Function>ClassName()</Function>
          <Default>ClassNamePlaceholder</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp">
        <![CDATA[public $PropType$ $PropName$
        {
            get { return ($PropType$)GetValue($PropName$Property); }
            set { SetValue($PropName$Property, value); }
        }
        public static readonly BindableProperty $PropName$Property = BindableProperty.Create(nameof($PropName$), typeof($PropType$), typeof($classname$), default($PropType$), BindingMode.OneWay, propertyChanged: $PropName$PropertyChanged);
        
        private static void $PropName$PropertyChanged(BindableObject bindable, object oldValue, object newValue)
        {
            if (bindable is $classname$ control)
            {
                // TODO Manage new/old value
                // control.??? = ($PropType$)newValue;
            }
        }]]>
      </Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>