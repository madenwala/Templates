<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AppFramework.Core</name>
    </assembly>
    <members>
        <member name="T:AppFramework.Core.Commands.CommandBase">
            <summary>
            Base class for commands.
            </summary>
        </member>
        <member name="E:AppFramework.Core.Commands.CommandBase.CanExecuteChanged">
            <summary>
            Raised when RaiseCanExecuteChanged is called.
            </summary>
        </member>
        <member name="M:AppFramework.Core.Commands.CommandBase.RaiseCanExecuteChanged">
            <summary>
            Method used to raise the <see cref="E:AppFramework.Core.Commands.CommandBase.CanExecuteChanged"/> event
            to indicate that the return value of the <see cref="M:AppFramework.Core.Commands.CommandBase.CanExecute(System.Object)"/>
            method has changed.
            </summary>
        </member>
        <member name="M:AppFramework.Core.Extensions.LongExtensions.ToStringAsMemory(System.Int64)">
            <summary>
            Converts a long to memory formatted string in bytes/KB/MB/GB.
            </summary>
            <param name="sizeInBytes"></param>
            <returns></returns>
        </member>
        <member name="T:AppFramework.Core.Models.IModel">
            <summary>
            Interface that all model objects should implement.
            </summary>
        </member>
        <member name="T:AppFramework.Core.Models.ModelBase">
            <summary>
            Implementation of <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> to simplify models.
            </summary>
        </member>
        <member name="E:AppFramework.Core.Models.ModelBase.PropertyChanged">
            <summary>
            Multicast event for property change notifications.
            </summary>
        </member>
        <member name="M:AppFramework.Core.Models.ModelBase.SetProperty``1(``0@,``0,System.String)">
            <summary>
            Checks if a property already matches a desired value.  Sets the property and
            notifies listeners only when necessary.
            </summary>
            <typeparam name="T">Type of the property.</typeparam>
            <param name="storage">Reference to a property with both getter and setter.</param>
            <param name="value">Desired value for the property.</param>
            <param name="propertyName">Name of the property used to notify listeners.  This
            value is optional and can be provided automatically when invoked from compilers that
            support CallerMemberName.</param>
            <returns>True if the value was changed, false if the existing value matched the
            desired value.</returns>
        </member>
        <member name="M:AppFramework.Core.Models.ModelBase.NotifyPropertyChanged(System.String)">
            <summary>
            Notifies listeners that a property value has changed.
            </summary>
            <param name="propertyName">Optional name of the property used to notify listeners.  This
            value is optional and can be provided automatically when invoked from compilers
            that support <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute"/>.</param>
        </member>
        <member name="M:AppFramework.Core.Models.ModelBase.NotifyPropertyChanged``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Notifies listeners that a property value has changed.
            </summary>
            <typeparam name="T">Type of the property in the expression.</typeparam>
            <param name="property">Expression to retrieve the property. Example: () => this.FirstName</param>
        </member>
        <member name="M:AppFramework.Core.Models.ModelBase.GetPropertyName``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Gets the string name of a property expression.
            </summary>
            <typeparam name="T">Type of the property in the expression.</typeparam>
            <param name="property">Expression to retrieve the property. Example: () => this.FirstName</param>
            <returns>String value representing the property name.</returns>
        </member>
        <member name="M:AppFramework.Core.Models.ModelBase.GetMememberExpression``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Gets the MemberExpression from a property expression.
            </summary>
            <typeparam name="T">Type of the property in the expression.</typeparam>
            <param name="property">Expression to retrieve the property. Example: () => this.FirstName</param>
            <returns>MemberExpression instance presenting the property expression.</returns>
        </member>
        <member name="M:AppFramework.Core.Models.ModelBase.GetPropertyInfo``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Retrieves a PropertyInfo object representing the property in the specified expression.
            </summary>
            <typeparam name="T">Type of the property in the expression.</typeparam>
            <param name="property">Expression to retrieve the property. Example: () => this.FirstName</param>
            <returns>PropertyInfo object of the expression property else null if not found.</returns>
        </member>
        <member name="T:AppFramework.Core.Models.UniqueModelBase">
            <summary>
            Implementation of <see cref="!:INotifyPropertyChanged"/> to simplify models that have a unique ID to represent the model.
            </summary>
        </member>
        <member name="T:AppFramework.Core.SerializerTypes">
            <summary>
            Serialization methods the application supports.
            </summary>
        </member>
        <member name="F:AppFramework.Core.SerializerTypes.Default">
            <summary>
            Use the default serializer for the application.
            </summary>
        </member>
        <member name="F:AppFramework.Core.SerializerTypes.Json">
            <summary>
            Use the JSON serializer.
            </summary>
        </member>
        <member name="F:AppFramework.Core.SerializerTypes.Xml">
            <summary>
            Use the XML serializer.
            </summary>
        </member>
        <member name="T:AppFramework.Core.Serializer">
            <summary>
            Serialize and deserialize objects.
            </summary>
        </member>
        <member name="P:AppFramework.Core.Serializer.DefaultSerializerType">
            <summary>
            Get or set the default serialization method for the application. If an object that needs serialization/deserialization does not explictly
            request a particular serializer, the default serializer will be used.
            </summary>
        </member>
        <member name="M:AppFramework.Core.Serializer.Serialize(System.Object,AppFramework.Core.SerializerTypes)">
            <summary>
            Serialize an object to string.
            </summary>
            <param name="obj">Object to serialize.</param>
            <param name="serializerType">Use the default serializer or specific a particular serializer.</param>
            <returns>String returned from the serializer.</returns>
        </member>
        <member name="M:AppFramework.Core.Serializer.Deserialize``1(System.String,AppFramework.Core.SerializerTypes)">
            <summary>
            Deserializes a string back into an instance of an object.
            </summary>
            <typeparam name="T">Type of the object to be returned.</typeparam>
            <param name="data">String data to be deserialized.</param>
            <param name="serializerType">Use the default serializer or specific a particular serializer.</param>
            <returns>Object instance from the deserialized data string.</returns>
        </member>
        <member name="M:AppFramework.Core.Serializer.DeserializeFromXml``1(System.String)">
            <summary>
            Deserializes an XML string back into an object instance.
            </summary>
            <typeparam name="T">Type of the object to be returned.</typeparam>
            <param name="xml">XML string to be deserialized.</param>
            <returns>Object instance deserialized from the string data.</returns>
        </member>
        <member name="M:AppFramework.Core.Serializer.SerializeToXml(System.Object)">
            <summary>
            Serializes an object to XML.
            </summary>
            <param name="obj">Object to be serialized.</param>
            <returns>String representing the serialized object.</returns>
        </member>
        <member name="M:AppFramework.Core.Serializer.DeserializeFromJson``1(System.String)">
            <summary>
            Deserializes a JSON string into an object instance.
            </summary>
            <typeparam name="T">Type of the object to be returned.</typeparam>
            <param name="json">JSON string representing an object.</param>
            <returns>Instance of an object from the JSON string.</returns>
        </member>
        <member name="M:AppFramework.Core.Serializer.SerializeToJson(System.Object)">
            <summary>
            Serializes an object into a JSON string.
            </summary>
            <param name="obj">Object instance to serialize.</param>
            <returns>JSON string representing the object instance.</returns>
        </member>
        <member name="T:AppFramework.Core.TypeUtility">
            <summary>
            TypeUtility tests types to see if they are primitive types.
            </summary>
        </member>
        <member name="M:AppFramework.Core.TypeUtility.IsPrimitive(System.Type)">
            <summary>
            Tests a type to see if its a primitive type.
            </summary>
            <param name="type">Type to check if primitive.</param>
            <returns>True if the specified type is a primitive else false.</returns>
        </member>
        <member name="M:IEnumerableExtensions.ToObservableCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Convert this collection into an ObservableCollection instance.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <returns>ObservableCollection instance containing items of the type specified.</returns>
        </member>
        <member name="M:IEnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs an action on each item within the collection.
            </summary>
            <typeparam name="T">Type of the item in the collection.</typeparam>
            <param name="source">Collection source.</param>
            <param name="action">Action to perform on each item.</param>
        </member>
    </members>
</doc>
