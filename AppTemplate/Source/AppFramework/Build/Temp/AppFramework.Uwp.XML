<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AppFramework.Uwp</name>
    </assembly>
    <members>
        <member name="T:AppFramework.Core.SerializerTypes">
            <summary>
            Serialization methods the application supports.
            </summary>
        </member>
        <member name="F:AppFramework.Core.SerializerTypes.Default">
            <summary>
            Use the default serializer for the application.
            </summary>
        </member>
        <member name="F:AppFramework.Core.SerializerTypes.Json">
            <summary>
            Use the JSON serializer.
            </summary>
        </member>
        <member name="F:AppFramework.Core.SerializerTypes.Xml">
            <summary>
            Use the XML serializer.
            </summary>
        </member>
        <member name="T:AppFramework.Core.Serializer">
            <summary>
            Serialize and deserialize objects.
            </summary>
        </member>
        <member name="P:AppFramework.Core.Serializer.DefaultSerializerType">
            <summary>
            Get or set the default serialization method for the application. If an object that needs serialization/deserialization does not explictly
            request a particular serializer, the default serializer will be used.
            </summary>
        </member>
        <member name="M:AppFramework.Core.Serializer.Serialize(System.Object,AppFramework.Core.SerializerTypes)">
            <summary>
            Serialize an object to string.
            </summary>
            <param name="obj">Object to serialize.</param>
            <param name="serializerType">Use the default serializer or specific a particular serializer.</param>
            <returns>String returned from the serializer.</returns>
        </member>
        <member name="M:AppFramework.Core.Serializer.Deserialize``1(System.String,AppFramework.Core.SerializerTypes)">
            <summary>
            Deserializes a string back into an instance of an object.
            </summary>
            <typeparam name="T">Type of the object to be returned.</typeparam>
            <param name="data">String data to be deserialized.</param>
            <param name="serializerType">Use the default serializer or specific a particular serializer.</param>
            <returns>Object instance from the deserialized data string.</returns>
        </member>
        <member name="M:AppFramework.Core.Serializer.DeserializeFromXml``1(System.String)">
            <summary>
            Deserializes an XML string back into an object instance.
            </summary>
            <typeparam name="T">Type of the object to be returned.</typeparam>
            <param name="xml">XML string to be deserialized.</param>
            <returns>Object instance deserialized from the string data.</returns>
        </member>
        <member name="M:AppFramework.Core.Serializer.SerializeToXml(System.Object)">
            <summary>
            Serializes an object to XML.
            </summary>
            <param name="obj">Object to be serialized.</param>
            <returns>String representing the serialized object.</returns>
        </member>
        <member name="M:AppFramework.Core.Serializer.DeserializeFromJson``1(System.String)">
            <summary>
            Deserializes a JSON string into an object instance.
            </summary>
            <typeparam name="T">Type of the object to be returned.</typeparam>
            <param name="json">JSON string representing an object.</param>
            <returns>Instance of an object from the JSON string.</returns>
        </member>
        <member name="M:AppFramework.Core.Serializer.SerializeToJson(System.Object)">
            <summary>
            Serializes an object into a JSON string.
            </summary>
            <param name="obj">Object instance to serialize.</param>
            <returns>JSON string representing the object instance.</returns>
        </member>
        <member name="M:AppFramework.Core.Extensions.IDictionaryExtensions.ContainsKeyAndValue(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String)">
            <summary>
            Checks whether or not a string IDictionary contains a particular key and value combination.
            </summary>
            <param name="dic">String IDictionary instance.</param>
            <param name="key">Key to check for.</param>
            <param name="value">Value to check for.</param>
            <returns>True if it contains the combination else false.</returns>
        </member>
        <member name="M:AppFramework.Core.Extensions.IEnumerableExtensions.ToObservableCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Convert this collection into an ObservableCollection instance.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <returns>ObservableCollection instance containing items of the type specified.</returns>
        </member>
        <member name="M:AppFramework.Core.Extensions.IEnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs an action on each item within the collection.
            </summary>
            <typeparam name="T">Type of the item in the collection.</typeparam>
            <param name="source">Collection source.</param>
            <param name="action">Action to perform on each item.</param>
        </member>
        <member name="M:AppFramework.Core.Extensions.LongExtensions.ToStringAsMemory(System.Int64)">
            <summary>
            Converts a long to memory formatted string in bytes/KB/MB/GB.
            </summary>
            <param name="sizeInBytes"></param>
            <returns></returns>
        </member>
        <member name="M:AppFramework.Core.Extensions.GeocoordinateExtensions.AsLocationModel(Windows.Devices.Geolocation.Geocoordinate)">
            <summary>
            Converts this Geocoordinate object into a LocationModel instance.
            </summary>
            <param name="coord">Geocoordinate to convert to LocationModel.</param>
            <returns>LocationModel instance representing this Geocoordinate.</returns>
        </member>
        <member name="M:AppFramework.Core.Extensions.GeocoordinateExtensions.AsBasicGeoposition(AppFramework.Core.Models.ILocationModel)">
            <summary>
            Converts a ILocationModel into a BasicGeoposition object.
            </summary>
            <param name="loc">ILocationModel to convert to BasicGeoposition.</param>
            <returns>BasicGeoposition instance representing this ILocationModel.</returns>
        </member>
        <member name="M:AppFramework.Core.Extensions.GeocoordinateExtensions.AsGeoPoint(AppFramework.Core.Models.ILocationModel)">
            <summary>
            Converts a ILocationModel into a GeoPoint object.
            </summary>
            <param name="loc">ILocationModel to convert to Geopoint.</param>
            <returns>Geopoint instance representing this ILocationModel.</returns>
        </member>
        <member name="M:AppFramework.Core.Extensions.PackageVersionExtensions.ToVersion(Windows.ApplicationModel.PackageVersion)">
            <summary>
            Converts this PackageVersion instance into a Version instance.
            </summary>
            <returns>Version instance with the version numbers.</returns>
        </member>
        <member name="T:AppFramework.Core.PlatformBase">
            <summary>
            Base class used to manage application execution and to access all services available to the solution.
            Provides core app functionality for initializing and suspending your application,
            handling exceptions, and more.
            </summary>
        </member>
        <member name="P:AppFramework.Core.PlatformBase.AppInfo">
            <summary>
            Gets access to the app info service of the platform currently executing.
            </summary>
        </member>
        <member name="P:AppFramework.Core.PlatformBase.BackgroundTasks">
            <summary>
            Gets access to the geocoding service adapter implement of the platform currently executing.
            </summary>
        </member>
        <member name="P:AppFramework.Core.PlatformBase.Geolocation">
            <summary>
            Gets access to the location service of the platform currently executing.
            </summary>
        </member>
        <member name="P:AppFramework.Core.PlatformBase.Notifications">
            <summary>
            Gets access to the notifications service of the platform currently executing. Provides you the ability to display toasts or manage tiles or etc on the executing platform.
            </summary>
        </member>
        <member name="P:AppFramework.Core.PlatformBase.NavigationBase">
            <summary>
            Gets the ability to navigate to different parts of an application specific to the platform currently executing.
            </summary>
        </member>
        <member name="P:AppFramework.Core.PlatformBase.SharingManager">
            <summary>
            Gets access to the app info service of the platform currently executing.
            </summary>
        </member>
        <member name="P:AppFramework.Core.PlatformBase.Analytics">
            <summary>
            Gets access to the analytics service of the platform currently executing.
            </summary>
        </member>
        <member name="P:AppFramework.Core.PlatformBase.Cryptography">
            <summary>
            Gets access to the cryptography provider of the platform currently executing.
            </summary>
        </member>
        <member name="P:AppFramework.Core.PlatformBase.EmailProvider">
            <summary>
            Gets access to the app info service of the platform currently executing.
            </summary>
        </member>
        <member name="P:AppFramework.Core.PlatformBase.Geocode">
            <summary>
            Gets access to the geocoding service adapter implement of the platform currently executing.
            </summary>
        </member>
        <member name="P:AppFramework.Core.PlatformBase.Jumplist">
            <summary>
            Gets access to the app info service of the platform currently executing.
            </summary>
        </member>
        <member name="P:AppFramework.Core.PlatformBase.Logger">
            <summary>
            Gets access to the logging service of the platform currently executing.
            </summary>
        </member>
        <member name="P:AppFramework.Core.PlatformBase.Ratings">
            <summary>
            Gets access to the ratings manager used to help promote users to rate your application.
            </summary>
        </member>
        <member name="P:AppFramework.Core.PlatformBase.Storage">
            <summary>
            Gets access to the storage system of the platform currently executing.
            </summary>
        </member>
        <member name="P:AppFramework.Core.PlatformBase.VoiceCommandManager">
            <summary>
            Gets access to the app info service of the platform currently executing.
            </summary>
        </member>
        <member name="P:AppFramework.Core.PlatformBase.WebAccountManager">
            <summary>
            Gets access to the app info service of the platform currently executing.
            </summary>
        </member>
        <member name="P:AppFramework.Core.PlatformBase.CurrentCore">
            <summary>
            Provides access to application services.
            </summary>
        </member>
        <member name="P:AppFramework.Core.PlatformBase.DeviceFamily">
            <summary>
            Gets the current device family this app is executing on.
            </summary>
        </member>
        <member name="P:AppFramework.Core.PlatformBase.AppSettingsLocalCore">
            <summary>
            Gets local app settings for this app.
            </summary>
        </member>
        <member name="P:AppFramework.Core.PlatformBase.AppSettingsRoamingCore">
            <summary>
            Gets roaming app settings for this app.
            </summary>
        </member>
        <member name="P:AppFramework.Core.PlatformBase.IsDesktop">
            <summary>
            Gets whether or not the current device is Windows Desktop.
            </summary>
        </member>
        <member name="P:AppFramework.Core.PlatformBase.IsMobile">
            <summary>
            Gets whether or not the current device is Windows Mobile.
            </summary>
        </member>
        <member name="P:AppFramework.Core.PlatformBase.IsXbox">
            <summary>
            Gets whether or not the current device is Xbox.
            </summary>
        </member>
        <member name="P:AppFramework.Core.PlatformBase.IsMobileContinuumDesktop">
            <summary>
            Gets whether or not the current device is executing on Windows Mobile Continuum Desktop.
            </summary>
        </member>
        <member name="P:AppFramework.Core.PlatformBase.InitializationMode">
            <summary>
            Indicates the initialization mode of this app instance.
            </summary>
        </member>
        <member name="P:AppFramework.Core.PlatformBase.BackgroundRegistrationTask">
            <summary>
            Gets the task object which registers all the background tasks in the application.
            </summary>
        </member>
        <member name="M:AppFramework.Core.PlatformBase.AppInitializingAsync(AppFramework.Core.InitializationModes)">
            <summary>
            Global initialization of the app and loads all app settings and initializes all services.
            </summary>
            <param name="mode">Specifies the mode of this app instance and how it's executing.</param>
            <returns>Awaitable task is returned.</returns>
        </member>
        <member name="M:AppFramework.Core.PlatformBase.CheckInitializationAsync(AppFramework.Core.Services.ServiceBase)">
            <summary>
            Initializes a service if not already initialized.
            </summary>
            <param name="service">Service instance to intialize.</param>
        </member>
        <member name="M:AppFramework.Core.PlatformBase.AppSuspending">
            <summary>
            Global suspension of the app and any custom logic to execute on suspend of the app.
            </summary>
        </member>
        <member name="M:AppFramework.Core.PlatformBase.SaveSettings">
            <summary>
            Saves any app settings only if the data had changed.
            </summary>
        </member>
        <member name="M:AppFramework.Core.PlatformBase.SignoutAllAsync">
            <summary>
            Logic performed during sign out of a user in this application.
            </summary>
            <returns>Awaitable task is returned.</returns>
        </member>
        <member name="M:AppFramework.Core.PlatformBase.GetService``1">
            <summary>
            Retrieve an instance of a type registered as a platform service.
            </summary>
            <typeparam name="T">Type reference of the service to retrieve.</typeparam>
            <returns>Instance of type T if it was already initialized or null if not found.</returns>
        </member>
        <member name="M:AppFramework.Core.PlatformBase.SetService``1(``0)">
            <summary>
            Registers and intializes an instance of an adapter.
            </summary>
            <typeparam name="T">Type reference of the service to register and initialize.</typeparam>
        </member>
        <member name="M:AppFramework.Core.PlatformBase.AppUnhandledException(System.Exception)">
            <summary>
            Global unhandled exception handler for your application.
            </summary>
            <param name="e"></param>
            <returns>True if the exception was handled else false.</returns>
        </member>
        <member name="M:AppFramework.Core.PlatformBase.GenerateModelArguments(AppFramework.Core.Models.IModel)">
            <summary>
            Creates a querystring parameter string from a model instance.
            </summary>
            <param name="model">Model to convert into a querystring.</param>
            <returns>Query string representing the model provided.</returns>
        </member>
        <member name="M:AppFramework.Core.PlatformBase.OnGenerateModelArguments(System.Collections.Generic.Dictionary{System.String,System.String},AppFramework.Core.Models.IModel)">
            <summary>
            Creates a querystring parameter string from a model instance.
            </summary>
            <param name="dic">Dictionary of parameters to add to the querystring.</param>
            <param name="model">Model to convert into a querystring.</param>
            <returns>Query string representing the model provided.</returns>
        </member>
        <member name="M:AppFramework.Core.PlatformBase.GenerateModelTileID(AppFramework.Core.Models.IModel)">
            <summary>
            Generates a unique tile ID used for secondary tiles based on a model instance.
            </summary>
            <param name="model">Model to convert into a unique tile ID.</param>
            <returns>String representing a unique tile ID for the model else null if not supported.</returns>
        </member>
        <member name="M:AppFramework.Core.PlatformBase.GenerateModelFromTileIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Converts a tile ID back into an object instance.
            </summary>
            <param name="tileID">Tile ID to retrieve an object instance for.</param>
            <param name="ct">Cancelation token.</param>
            <returns>Object instance if found else null.</returns>
        </member>
        <member name="E:AppFramework.Core.PlatformBase.NotifyShellMenuToggle">
            <summary>
            Event which notifies the shell to open or close the menu.
            </summary>
        </member>
        <member name="M:AppFramework.Core.PlatformBase.ExecuteBackgroundWork(Windows.ApplicationModel.Background.IBackgroundTaskInstance,System.Action{System.Threading.CancellationToken})">
            <summary>
            Executes background task work. This call wraps the work with error handling, deferrals, and instantiating all the appropriate services needed by AppFramework.
            </summary>
            <param name="taskInstance">Background task instance.</param>
            <param name="work">The work that needs to be performed.</param>
        </member>
        <member name="T:AppFramework.Core.AgentSync">
            <summary>
            AgentSync is used to determine if the main app or a background task is running. You can use this to
            prevent execution of a background task if the main app is in the foreground.
            </summary>
        </member>
        <member name="M:AppFramework.Core.AgentSync.Init(Windows.UI.Xaml.Application)">
            <summary>
            Initializes the AgentSync so that it can keep track of the application running status.
            </summary>
            <param name="app"></param>
        </member>
        <member name="M:AppFramework.Core.AgentSync.ApplicationIsLaunched">
            <summary>
            Markes the agent sync as running.
            </summary>
        </member>
        <member name="M:AppFramework.Core.AgentSync.ApplicationIsSuspended">
            <summary>
            Marks the agent sync as NOT running
            </summary>
        </member>
        <member name="M:AppFramework.Core.AgentSync.IsApplicationLaunched">
            <summary>
            Indicates whether or not the main application is currently running.
            </summary>
            <returns>True if the application is launched/running else false.</returns>
        </member>
        <member name="T:AppFramework.Core.Commands.CommandBase">
            <summary>
            Base class for commands.
            </summary>
        </member>
        <member name="E:AppFramework.Core.Commands.CommandBase.CanExecuteChanged">
            <summary>
            Raised when RaiseCanExecuteChanged is called.
            </summary>
        </member>
        <member name="M:AppFramework.Core.Commands.CommandBase.RaiseCanExecuteChanged">
            <summary>
            Method used to raise the <see cref="E:AppFramework.Core.Commands.CommandBase.CanExecuteChanged"/> event
            to indicate that the return value of the <see cref="M:AppFramework.Core.Commands.CommandBase.CanExecute(System.Object)"/>
            method has changed.
            </summary>
        </member>
        <member name="T:AppFramework.Core.Commands.GenericCommand">
            <summary>
            Command used in data binding. GenericCommand is wired up with logging and analytics calls.
            </summary>
        </member>
        <member name="M:AppFramework.Core.Commands.GenericCommand.#ctor(System.String,System.Action,System.Func{System.Boolean})">
            <summary>
            Creates a new command instance.
            </summary>
            <param name="commandName">Identifies this command instance, used for logging.</param>
            <param name="execute">The logic to run when execute is called. No parameter will be passed to this execute action.</param>
            <param name="canExecute">The function which determines if this command can run or not.</param>
        </member>
        <member name="M:AppFramework.Core.Commands.GenericCommand.#ctor(System.String,System.Action{System.Object},System.Func{System.Object,System.Boolean})">
            <summary>
            Creates a new command instance.
            </summary>
            <param name="commandName">Identifies this command instance, used for logging.</param>
            <param name="execute">The logic to run when execute is called. Execute parameter object will be passed to this action.</param>
            <param name="canExecute">The function which determines if this command can run or not.</param>
        </member>
        <member name="T:AppFramework.Core.Commands.GenericCommand`1">
            <summary>
            Command used in data binding. GenericCommand is wired up with logging and analytics calls.
            </summary>
            <typeparam name="T">Type of the command parameter that will be passed in.</typeparam>
        </member>
        <member name="P:AppFramework.Core.Commands.GenericCommand`1.IsEnabled">
            <summary>
            Gets or sets whether or not this command instance is enabled to execute the provided CanExecute function. If false, CanExecute will always return false. If true, the provided CanExecute method will determine if CanExecute is true/false.
            </summary>
        </member>
        <member name="M:AppFramework.Core.Commands.GenericCommand`1.#ctor(System.String,System.Action,System.Func{System.Boolean})">
            <summary>
            Creates a new command instance.
            </summary>
            <param name="commandName">Identifies this command instance, used for logging.</param>
            <param name="execute">The logic to run when execute is called. No parameter will be passed to this execute action.</param>
            <param name="canExecute">The execution status logic.</param>
        </member>
        <member name="M:AppFramework.Core.Commands.GenericCommand`1.#ctor(System.String,System.Action{`0},System.Func{`0,System.Boolean})">
            <summary>
            Creates a new command.
            </summary>
            <param name="commandName">Identifies this command instance, used for logging.</param>
            <param name="execute">The logic to run when execute is called. Execute parameter object must be of the generic type specified else it will be ignored.</param>
            <param name="canExecute">The function which determines if this command can run or not. CanExecute parameter object must be of the generic type specified else it will be ignored</param>
        </member>
        <member name="T:AppFramework.Core.Commands.MapExternalCommand">
            <summary>
            Command for launching an external maps app passing an ILocationModel command parameter instance passed to this command.
            </summary>
        </member>
        <member name="T:AppFramework.Core.Commands.NavigationCommand">
            <summary>
            Command for navigating to a page.
            </summary>
        </member>
        <member name="M:AppFramework.Core.Commands.NavigationCommand.#ctor">
            <summary>
            Command for navigating to a page based on the IModel parameter passed into the Execute method.
            </summary>
        </member>
        <member name="M:AppFramework.Core.Commands.NavigationCommand.#ctor(System.String,System.Action,System.Func{System.Boolean})">
            <summary>
            Command for navigation to a page.
            </summary>
            <param name="commandName">Identifies this command instance, used for logging.</param>
            <param name="execute">Logic to execute, Execute command object will be ignored.</param>
            <param name="canExecute">Logic to determine if this command can execute, CanExecute parameter will be ignored.</param>
        </member>
        <member name="M:AppFramework.Core.Commands.NavigationCommand.#ctor(System.String,System.Action{System.Object},System.Func{System.Object,System.Boolean})">
            <summary>
            Command for navigation to a page.
            </summary>
            <param name="commandName">Identifies this command instance, used for logging.</param>
            <param name="execute">Logic to execute, Execute command object must be an IModel type.</param>
            <param name="canExecute">Logic to determine if this command can execute, CanExecute parameter must be an IModel type.</param>
        </member>
        <member name="T:AppFramework.Core.Commands.PinTileCommand">
            <summary>
            Command for pinning tiles.
            </summary>
        </member>
        <member name="P:AppFramework.Core.Commands.PinTileCommand.OnSuccessAction">
            <summary>
            Custom action to perform after Execute runs successfully.
            </summary>
        </member>
        <member name="M:AppFramework.Core.Commands.PinTileCommand.#ctor">
            <summary>
            Creates a new command instance for pinning IModel objects to the user's start screen.
            </summary>
        </member>
        <member name="T:AppFramework.Core.Commands.UnpinTileCommand">
            <summary>
            Command for unpinning tiles.
            </summary>
        </member>
        <member name="P:AppFramework.Core.Commands.UnpinTileCommand.OnSuccessAction">
            <summary>
            Custom action to perform after Execute runs successfully.
            </summary>
        </member>
        <member name="M:AppFramework.Core.Commands.UnpinTileCommand.#ctor">
            <summary>
            Creates a new command instance for removing IModel objects from a user's start screen.
            </summary>
        </member>
        <member name="T:AppFramework.Core.Commands.ShareCommand">
            <summary>
            Command for sharing content to the OS.
            </summary>
        </member>
        <member name="M:AppFramework.Core.Commands.ShareCommand.#ctor">
            <summary>
            Creates a new command instance for sharing IModel objects to other apps.
            </summary>
        </member>
        <member name="T:AppFramework.Core.Commands.WebViewCommand">
            <summary>
            Command for navigating to an internal web browser to display a webpage within the app.
            </summary>
        </member>
        <member name="M:AppFramework.Core.Commands.WebViewCommand.#ctor">
            <summary>
            Create an instance of the command for internal webpage browsing.
            </summary>
        </member>
        <member name="T:AppFramework.Core.Commands.WebBrowserCommand">
            <summary>
            Command for navigating to an external web browser to display a webpage.
            </summary>
        </member>
        <member name="M:AppFramework.Core.Commands.WebBrowserCommand.#ctor">
            <summary>
            Create an instance of the command for external webpage browsing.
            </summary>
        </member>
        <member name="T:AppFramework.Core.Models.UniqueModelBase">
            <summary>
            Implementation of <see cref="!:INotifyPropertyChanged"/> to simplify models that have a unique ID to represent the model.
            </summary>
        </member>
        <member name="T:AppFramework.Core.Models.AppSettingsLocalBase">
            <summary>
            Container class for local application settings.  Create all your local app setting properties here.
            </summary>
        </member>
        <member name="P:AppFramework.Core.Models.AppSettingsLocalBase.LocationLastKnown">
            <summary>
            Gets or sets the last known location for the user.
            </summary>
        </member>
        <member name="T:AppFramework.Core.Models.AppSettingsRoamingBase">
            <summary>
            Container class for roaming application settings.  Create all your roaming app setting properties here.
            </summary>
        </member>
        <member name="P:AppFramework.Core.Models.AppSettingsRoamingBase.ApplicationTheme">
            <summary>
            Gets or sets the application theme desired by the user.
            </summary>
        </member>
        <member name="P:AppFramework.Core.Models.AppSettingsRoamingBase.EnableFullLogging">
            <summary>
            Gets or sets whether or not debug logging is enabled.
            </summary>
        </member>
        <member name="T:AppFramework.Core.Models.BackgroundTaskRunInfo">
            <summary>
            Used to hold background tasks execution status information.
            </summary>
        </member>
        <member name="P:AppFramework.Core.Models.BackgroundTaskRunInfo.TaskName">
            <summary>
            Gets or sets the name of the task that was executed.
            </summary>
        </member>
        <member name="P:AppFramework.Core.Models.BackgroundTaskRunInfo.StartTime">
            <summary>
            Gets or sets the start time of the task execution.
            </summary>
        </member>
        <member name="P:AppFramework.Core.Models.BackgroundTaskRunInfo.EndTime">
            <summary>
            Gets or sets the end time of the task execution.
            </summary>
        </member>
        <member name="P:AppFramework.Core.Models.BackgroundTaskRunInfo.RunSuccessfully">
            <summary>
            Gets or sets whether or not the task completed successfully or not.
            </summary>
        </member>
        <member name="P:AppFramework.Core.Models.BackgroundTaskRunInfo.CancelReason">
            <summary>
            Gets or sets the reason the task was cancelled.
            </summary>
        </member>
        <member name="P:AppFramework.Core.Models.BackgroundTaskRunInfo.ExceptionDetails">
            <summary>
            Gets or sets the details of any exception that was thrown during the task execution.
            </summary>
        </member>
        <member name="P:AppFramework.Core.Models.BackgroundTaskRunInfo.TimeToRun">
            <summary>
            Gets the number of milliseconds the task took to run.
            </summary>
        </member>
        <member name="T:AppFramework.Core.Models.ILocationModel">
            <summary>
            Interface that any model containing latitude/longitude should implement.
            </summary>
        </member>
        <member name="T:AppFramework.Core.Models.LocationModel">
            <summary>
            Models that contain latitude/longitude can inherit from this class to gain ModelBase + ILocationModel functionality and
            any other functionality common to location based models.
            </summary>
        </member>
        <member name="P:AppFramework.Core.Models.LocationModel.IsMetric">
            <summary>
            Indicates whether or not the system is metric or imperial.
            </summary>
        </member>
        <member name="P:AppFramework.Core.Models.LocationModel.LocationDisplayName">
            <summary>
            Gets or sets a friendly display name to summaries the latitude/longitude or the name of this location if set.
            </summary>
        </member>
        <member name="P:AppFramework.Core.Models.LocationModel.Latitude">
            <summary>
            Gets or sets the latitude of this object.
            </summary>
        </member>
        <member name="P:AppFramework.Core.Models.LocationModel.Longitude">
            <summary>
            Gets or sets the longitude of this object.
            </summary>
        </member>
        <member name="P:AppFramework.Core.Models.LocationModel.DistanceAway">
            <summary>
            Gets the distance away this object is. Use SetDistanceAway to update this property.
            </summary>
        </member>
        <member name="P:AppFramework.Core.Models.LocationModel.DistanceAwayDisplay">
            <summary>
            Gets a friendly display for the distance away.
            </summary>
        </member>
        <member name="M:AppFramework.Core.Models.LocationModel.SetLocation(AppFramework.Core.Models.ILocationModel)">
            <summary>
            Update the latitude/longitude of this object.
            </summary>
            <param name="loc">Location information to update this object with.</param>
            <returns></returns>
        </member>
        <member name="M:AppFramework.Core.Models.LocationModel.SetDistanceAway(AppFramework.Core.Models.ILocationModel)">
            <summary>
            Sets the distance away property of this object calculated from the specified location object.
            </summary>
            <param name="loc">Location object to calculate distance away with.</param>
        </member>
        <member name="M:AppFramework.Core.Models.LocationModel.GetDistanceTo(AppFramework.Core.Models.ILocationModel)">
            <summary>
            Gets the distance away from a specified location object.
            </summary>
            <param name="loc">Location object to calculate distance away with.</param>
            <returns>Distance amount.</returns>
        </member>
        <member name="T:AppFramework.Core.Models.LocationModelList`1">
            <summary>
            Collection for holding LocationModel instance.
            </summary>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="M:AppFramework.Core.Models.LocationModelList`1.SetDistancesAway(AppFramework.Core.Models.ILocationModel)">
            <summary>
            Set the distance away for all location model instances in this collection.
            </summary>
            <param name="loc"></param>
        </member>
        <member name="M:AppFramework.Core.Models.UniqueLocationModelList`1.SetDistancesAway(AppFramework.Core.Models.ILocationModel)">
            <summary>
            Set the distance away for all location model instances in this collection.
            </summary>
            <param name="loc"></param>
        </member>
        <member name="T:AppFramework.Core.Models.ModelList`1">
            <summary>
            Collection for holding model instances.
            </summary>
            <typeparam name="TItem">Type representing the items in this collection.</typeparam>
        </member>
        <member name="E:AppFramework.Core.Models.ModelList`1.PropertyChanged">
            <summary>
            Multicast event for property change notifications.
            </summary>
        </member>
        <member name="M:AppFramework.Core.Models.ModelList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds multiple items to this collection.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:AppFramework.Core.Models.ModelList`1.SortAsync(System.String)">
            <summary>
            Sorts the list by a property found on each item.
            </summary>
            <param name="propertyName"></param>
            <returns>Awaitable task is returned.</returns>
        </member>
        <member name="M:AppFramework.Core.Models.ModelList`1.SetProperty``1(``0@,``0,System.String)">
            <summary>
            Checks if a property already matches a desired value.  Sets the property and
            notifies listeners only when necessary.
            </summary>
            <typeparam name="T">Type of the property.</typeparam>
            <param name="storage">Reference to a property with both getter and setter.</param>
            <param name="value">Desired value for the property.</param>
            <param name="propertyName">Name of the property used to notify listeners.  This
            value is optional and can be provided automatically when invoked from compilers that
            support CallerMemberName.</param>
            <returns>True if the value was changed, false if the existing value matched the
            desired value.</returns>
        </member>
        <member name="M:AppFramework.Core.Models.ModelList`1.NotifyPropertyChanged(System.String)">
            <summary>
            Notifies listeners that a property value has changed.
            </summary>
            <param name="propertyName">Name of the property used to notify listeners.  This
            value is optional and can be provided automatically when invoked from compilers
            that support <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute"/>.</param>
        </member>
        <member name="M:AppFramework.Core.Models.ModelList`1.NotifyPropertyChanged``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Notifies listeners that a property value has changed.
            </summary>
            <typeparam name="T">Type of the property in the expression.</typeparam>
            <param name="property">Expression to retrieve the property. Example: () => this.FirstName</param>
        </member>
        <member name="M:AppFramework.Core.Models.ModelList`1.GetPropertyName``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Gets the string name of a property expression.
            </summary>
            <typeparam name="T">Type of the property in the expression.</typeparam>
            <param name="property">Expression to retrieve the property. Example: () => this.FirstName</param>
            <returns>String value representing the property name.</returns>
        </member>
        <member name="M:AppFramework.Core.Models.ModelList`1.GetMememberExpression``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Gets the MemberExpression from a property expression.
            </summary>
            <typeparam name="T">Type of the property in the expression.</typeparam>
            <param name="property">Expression to retrieve the property. Example: () => this.FirstName</param>
            <returns>MemberExpression instance presenting the property expression.</returns>
        </member>
        <member name="M:AppFramework.Core.Models.UniqueModelList`1.RemoveOld(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Remove any existing items not in the new supplied list.
            </summary>
            <param name="newItems"></param>
        </member>
        <member name="T:AppFramework.Core.Models.NotifyTaskCompletion`1">
            <summary>
            Task wrapper for async operations that are UI bindable. See https://msdn.microsoft.com/en-us/magazine/dn605875.aspx
            </summary>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="T:AppFramework.Core.Models.VoiceCommandInfo">
            <summary>
            Wrapper for SpeechRecognitionResult class instance improving access to the key data needed to process voice.
            </summary>
        </member>
        <member name="P:AppFramework.Core.Models.VoiceCommandInfo.Result">
            <summary>
            Access the wrapped SpeechRecognitionResult object instance.
            </summary>
        </member>
        <member name="P:AppFramework.Core.Models.VoiceCommandInfo.VoiceCommandName">
            <summary>
            Gets the voice command name that was activated.
            </summary>
        </member>
        <member name="P:AppFramework.Core.Models.VoiceCommandInfo.TextSpoken">
            <summary>
            Gets the text that was spoken by the user.
            </summary>
        </member>
        <member name="M:AppFramework.Core.Models.VoiceCommandInfo.GetSemanticInterpretation(System.String)">
            <summary>
            Returns the semantic interpretation of a speech result. Returns null if there is no interpretation for
            that key.
            </summary>
            <param name="interpretationKey">The interpretation key.</param>
            <returns>Gets the item in the phrase list that was spoken.</returns>
        </member>
        <member name="T:AppFramework.Core.Models.NavigationRequest">
            <summary>
            Represents navigation instructions that can be serialized and performed at a later time.
            </summary>
        </member>
        <member name="P:AppFramework.Core.Models.NavigationRequest.ViewType">
            <summary>
            Full type name of a view/page that needs to be instantiated.
            </summary>
        </member>
        <member name="P:AppFramework.Core.Models.NavigationRequest.ViewParameter">
            <summary>
            Object instance to pass in as a parameter.
            </summary>
        </member>
        <member name="P:AppFramework.Core.Strings.BackgroundTasks.TextBackgroundAppDisabledStatus">
            <summary>
            Localized resource similar to "Background tasks have not been enabled for this app.Use the manage button and ensure this app has been enabled to run in the background."
            </summary>
        </member>
        <member name="P:AppFramework.Core.Strings.Account.TextAuthenticating">
            <summary>
            Localized resource similar to "Authenticating..."
            </summary>
        </member>
        <member name="P:AppFramework.Core.Strings.Account.TextNotApplicable">
            <summary>
            Localized resource similar to "N/A"
            </summary>
        </member>
        <member name="P:AppFramework.Core.Strings.Account.TextSigningOut">
            <summary>
            Localized resource similar to "Signing out..."
            </summary>
        </member>
        <member name="P:AppFramework.Core.Strings.Account.TextSignout">
            <summary>
            Localized resource similar to "Sign out"
            </summary>
        </member>
        <member name="P:AppFramework.Core.Strings.Account.TextSignoutConfirmation">
            <summary>
            Localized resource similar to "Are you sure you want to sign out?"
            </summary>
        </member>
        <member name="P:AppFramework.Core.Strings.Account.TextUnauthorizedUser">
            <summary>
            Localized resource similar to "Unauthorized user. Check your username/password and try again."
            </summary>
        </member>
        <member name="P:AppFramework.Core.Strings.Account.TextUnauthorizedUserTitle">
            <summary>
            Localized resource similar to "Sign-in failed"
            </summary>
        </member>
        <member name="P:AppFramework.Core.Strings.Account.TextWebAccountManagerSignUpDescription">
            <summary>
            Localized resource similar to "Sign-In / Sign-Up with an account that you can associate with {0}."
            </summary>
        </member>
        <member name="P:AppFramework.Core.Strings.Location.TextDeterminingLocation">
            <summary>
            Localized resource similar to "Finding your location..."
            </summary>
        </member>
        <member name="P:AppFramework.Core.Strings.Location.TextDistanceAwayDisplay">
            <summary>
            Localized resource similar to "{0} {1} away"
            </summary>
        </member>
        <member name="P:AppFramework.Core.Strings.Location.TextKilomentersLong">
            <summary>
            Localized resource similar to "Kilometers"
            </summary>
        </member>
        <member name="P:AppFramework.Core.Strings.Location.TextKilomentersShort">
            <summary>
            Localized resource similar to "km"
            </summary>
        </member>
        <member name="P:AppFramework.Core.Strings.Location.TextLocationServicesDisabledStatus">
            <summary>
            Localized resource similar to "Location access has not been enabled for this app. Use the manage button and ensure this app has been enabled to use location services."
            </summary>
        </member>
        <member name="P:AppFramework.Core.Strings.Location.TextMilesLong">
            <summary>
            Localized resource similar to "Miles"
            </summary>
        </member>
        <member name="P:AppFramework.Core.Strings.Location.TextMilesShort">
            <summary>
            Localized resource similar to "mi"
            </summary>
        </member>
        <member name="P:AppFramework.Core.Strings.Resources.ApplicationProblemEmailBodyTemplate">
             <summary>
             Localized resource similar to "Please describe what you were doing when the problem occurred:
            --------------------
            
            
            --------------------"
             </summary>
        </member>
        <member name="P:AppFramework.Core.Strings.Resources.ApplicationProblemEmailSubjectTemplate">
            <summary>
            Localized resource similar to "{0} {1} auto-generated problem report"
            </summary>
        </member>
        <member name="P:AppFramework.Core.Strings.Resources.ApplicationProblemPromptMessage">
            <summary>
            Localized resource similar to "A problem occurred the last time you ran this application. Would you like to send us an email to report it?"
            </summary>
        </member>
        <member name="P:AppFramework.Core.Strings.Resources.ApplicationProblemPromptTitle">
            <summary>
            Localized resource similar to "Problem Report"
            </summary>
        </member>
        <member name="P:AppFramework.Core.Strings.Resources.ApplicationSharingBodyText">
             <summary>
             Localized resource similar to "Check out {0} from the Windows Store!
            
            {1}"
             </summary>
        </member>
        <member name="P:AppFramework.Core.Strings.Resources.ApplicationSupportEmailBodyTemplate">
             <summary>
             Localized resource similar to "Please provide and feedback you'd like to share with support:
            --------------------
            
            
            --------------------
            
            "
             </summary>
        </member>
        <member name="P:AppFramework.Core.Strings.Resources.ApplicationSupportEmailSubjectTemplate">
            <summary>
            Localized resource similar to "Feedback for {0} {1}"
            </summary>
        </member>
        <member name="P:AppFramework.Core.Strings.Resources.ClearAppCacheText">
            <summary>
            Localized resource similar to "Clear Cache"
            </summary>
        </member>
        <member name="P:AppFramework.Core.Strings.Resources.PromptRateApplicationEmailFeedbackMessage">
            <summary>
            Localized resource similar to "Would you like to send an e-mail with feedback instead?"
            </summary>
        </member>
        <member name="P:AppFramework.Core.Strings.Resources.PromptRateApplicationEmailFeedbackTitle">
            <summary>
            Localized resource similar to "Share feedback"
            </summary>
        </member>
        <member name="P:AppFramework.Core.Strings.Resources.PromptRateApplicationMessage">
            <summary>
            Localized resource similar to "Would you like to rate this application and provide feedback on how we can make things better?"
            </summary>
        </member>
        <member name="P:AppFramework.Core.Strings.Resources.PromptRateApplicationTitle">
            <summary>
            Localized resource similar to "Rate Application"
            </summary>
        </member>
        <member name="P:AppFramework.Core.Strings.Resources.TextCancel">
            <summary>
            Localized resource similar to "Cancel"
            </summary>
        </member>
        <member name="P:AppFramework.Core.Strings.Resources.TextCancellationRequested">
            <summary>
            Localized resource similar to "Canceled..."
            </summary>
        </member>
        <member name="P:AppFramework.Core.Strings.Resources.TextErrorGeneric">
            <summary>
            Localized resource similar to "An unexpected error has occured. We apologize for any inconveniences here and we will be working to resolve this soon."
            </summary>
        </member>
        <member name="P:AppFramework.Core.Strings.Resources.TextListNoData">
            <summary>
            Localized resource similar to "No items to display."
            </summary>
        </member>
        <member name="P:AppFramework.Core.Strings.Resources.TextLoading">
            <summary>
            Localized resource similar to "Loading..."
            </summary>
        </member>
        <member name="P:AppFramework.Core.Strings.Resources.TextMaybeLater">
            <summary>
            Localized resource similar to "Not right now"
            </summary>
        </member>
        <member name="P:AppFramework.Core.Strings.Resources.TextNo">
            <summary>
            Localized resource similar to "No"
            </summary>
        </member>
        <member name="P:AppFramework.Core.Strings.Resources.TextNoInternet">
            <summary>
            Localized resource similar to "No internet connection available. Connect to internet and try again."
            </summary>
        </member>
        <member name="P:AppFramework.Core.Strings.Resources.TextNotApplicable">
            <summary>
            Localized resource similar to "N/A"
            </summary>
        </member>
        <member name="P:AppFramework.Core.Strings.Resources.TextOk">
            <summary>
            Localized resource similar to "OK"
            </summary>
        </member>
        <member name="P:AppFramework.Core.Strings.Resources.TextYes">
            <summary>
            Localized resource similar to "Yes"
            </summary>
        </member>
        <member name="P:AppFramework.Core.Strings.Resources.ViewTitlePrivacyPolicy">
            <summary>
            Localized resource similar to "Privacy Policy"
            </summary>
        </member>
        <member name="P:AppFramework.Core.Strings.Resources.ViewTitleTermsOfService">
            <summary>
            Localized resource similar to "Terms of Service"
            </summary>
        </member>
        <member name="P:AppFramework.Core.Strings.WebBrowser.TextGoBack">
            <summary>
            Localized resource similar to "Go back"
            </summary>
        </member>
        <member name="P:AppFramework.Core.Strings.WebBrowser.TextGoForward">
            <summary>
            Localized resource similar to "Go forward"
            </summary>
        </member>
        <member name="P:AppFramework.Core.Strings.WebBrowser.TextWebDefaultTitle">
            <summary>
            Localized resource similar to "Web Browser"
            </summary>
        </member>
        <member name="P:AppFramework.Core.Strings.WebBrowser.TextWebErrorGeneric">
            <summary>
            Localized resource similar to "Could not load the requested page. Try again later."
            </summary>
        </member>
        <member name="T:AppFramework.Core.ViewModels.CollectionViewModelBase">
            <summary>
            ViewModelBase for views that need to display multiple separate sub-views which might have their own ViewModel instances. This 
            CollectionViewModelBase can contain multiple ViewModels and set a current view model so that the frame can show appropriate 
            status data specific to the current view model.
            </summary>
        </member>
        <member name="P:AppFramework.Core.ViewModels.CollectionViewModelBase.CurrentViewModel">
            <summary>
            Gets access to the current selected view model.
            </summary>
        </member>
        <member name="P:AppFramework.Core.ViewModels.CollectionViewModelBase.ViewModels">
            <summary>
            Gets access to the collection of sub-viewmodels.
            </summary>
        </member>
        <member name="M:AppFramework.Core.ViewModels.CollectionViewModelBase.SetCurrentAsync(AppFramework.Core.ViewModels.ViewModelBase)">
            <summary>
            Sets the current ViewModel that is active and visible.
            </summary>
            <param name="vm"></param>
        </member>
        <member name="P:AppFramework.Core.ViewModels.ViewModelBase.PlatformBase">
            <summary>
            Gets access to all the platform services.
            </summary>
        </member>
        <member name="P:AppFramework.Core.ViewModels.ViewModelBase.Dispatcher">
            <summary>
            Gets access to the dispatcher for this view or application.
            </summary>
        </member>
        <member name="P:AppFramework.Core.ViewModels.ViewModelBase.View">
            <summary>
            Gets or sets access to the page instance associated to this ViewModel instance.
            </summary>
        </member>
        <member name="P:AppFramework.Core.ViewModels.ViewModelBase.ViewParameter">
            <summary>
            Gets access to the parameter passed to the page.
            </summary>
        </member>
        <member name="P:AppFramework.Core.ViewModels.ViewModelBase.IsInitialized">
            <summary>
            True or false indicating whether or not the view model has been called at least by a view bound to this view model.
            </summary>
        </member>
        <member name="F:AppFramework.Core.ViewModels.ViewModelBase._Title">
            <summary>
            Gets or sets the title for the view specified by this view model.
            </summary>
        </member>
        <member name="P:AppFramework.Core.ViewModels.ViewModelBase.IsViewInChildFrame">
            <summary>
            Gets a boolean indicating whether or not the view instance is in a child frame of the window.
            </summary>
        </member>
        <member name="P:AppFramework.Core.ViewModels.ViewModelBase.ShowHomeButton">
            <summary>
            Get a boolean indicating whether or not this view should show a home button.
            </summary>
        </member>
        <member name="M:AppFramework.Core.ViewModels.ViewModelBase.OnBackNavigationRequested">
            <summary>
            Allows a view model to prevent back navigation if it needs to.
            </summary>
            <returns>True if on back navigation should be cancelled else false.</returns>
        </member>
        <member name="M:AppFramework.Core.ViewModels.ViewModelBase.OnForwardNavigationRequested">
            <summary>
            Allows a view model to prevent forward navigation if it needs to.
            </summary>
            <returns>True if on forward navigation should be cancelled else false.</returns>
        </member>
        <member name="M:AppFramework.Core.ViewModels.ViewModelBase.LoadStateAsync(Windows.UI.Xaml.Controls.Page,AppFramework.Core.LoadStateEventArgs)">
            <summary>
            Called by a view's OnNavigatedTo event, LoadState allows view models to perform initialization logic on initial or subsequent views of this page and view model instance.
            </summary>
            <param name="view">View that is being shown.</param>
            <param name="e">Arguments containing navigation and page state data.</param>
            <returns>Awaitable task is returned.</returns>
        </member>
        <member name="M:AppFramework.Core.ViewModels.ViewModelBase.OnLoadStateAsync(AppFramework.Core.LoadStateEventArgs)">
            <summary>
            Inherited view model instances perform any load state logic.
            </summary>
            <param name="e">Event args with all navigation data.</param>
            <returns>Awaitable task is returned.</returns>
        </member>
        <member name="M:AppFramework.Core.ViewModels.ViewModelBase.OnSaveStateAsync(AppFramework.Core.SaveStateEventArgs)">
            <summary>
            Inherited view model instances perform any save state logic.
            </summary>
            <param name="e">Event args with all navigation data.</param>
            <returns>Awaitable task is returned.</returns>
        </member>
        <member name="M:AppFramework.Core.ViewModels.ViewModelBase.SaveStateAsync(AppFramework.Core.SaveStateEventArgs)">
            <summary>
            Called by a view's OnNavigatedFrom event, SaveState allows view models to perform suspend logic whenever the page is navigated away from.
            </summary>
            <param name="e">Event args with all navigation data.</param>
            <returns>Awaitable task is returned.</returns>
        </member>
        <member name="P:AppFramework.Core.ViewModels.ViewModelBase.StatusIsBusy">
            <summary>
            Gets whether or not the view model is in busy status.
            </summary>
        </member>
        <member name="P:AppFramework.Core.ViewModels.ViewModelBase.StatusIsBlocking">
            <summary>
            Gets whether or not the busy status indicator for this view model should be blocking the UI view.
            </summary>
        </member>
        <member name="P:AppFramework.Core.ViewModels.ViewModelBase.StatusProgressValue">
            <summary>
            Gets the numerical value of the progress bar that should be displayed by busy status indicator.
            </summary>
        </member>
        <member name="P:AppFramework.Core.ViewModels.ViewModelBase.StatusText">
            <summary>
            Gets the text that should be displayed by the busy status indicator.
            </summary>
        </member>
        <member name="M:AppFramework.Core.ViewModels.ViewModelBase.CopyStatus(AppFramework.Core.ViewModels.ViewModelBase)">
            <summary>
            Copies status data from another ViewModel.
            </summary>
            <param name="vm">ViewModel to copy status data from.</param>
        </member>
        <member name="M:AppFramework.Core.ViewModels.ViewModelBase.ShowStatus(System.String,System.Boolean)">
            <summary>
            Show just a status message to the user for a indefinite period of time.
            </summary>
            <param name="message">Message to display on the UI</param>
        </member>
        <member name="M:AppFramework.Core.ViewModels.ViewModelBase.ShowBusyStatus(System.String,System.Boolean,System.Boolean)">
            <summary>
            Show the busy UI to the user for an indefinite period of time.
            </summary>
            <param name="message">Message to display on the UI</param>
            <param name="isBlocking">True if full screen blocking UI else false.</param>
        </member>
        <member name="M:AppFramework.Core.ViewModels.ViewModelBase.ShowTimedStatus(System.String,System.Int32,System.Boolean)">
            <summary>
            Show the busy UI to the user for a definitive period of time.
            </summary>
            <param name="message">Message to display on the UI</param>
            <param name="milliseconds">Time in milliseconds to display the message.</param>
        </member>
        <member name="M:AppFramework.Core.ViewModels.ViewModelBase.ClearStatus(System.Object)">
            <summary>
            Clears any status messages on the UI.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:AppFramework.Core.ViewModels.ViewModelBase.ClearStatus">
            <summary>
            Clears any status messages on the UI.
            </summary>
        </member>
        <member name="M:AppFramework.Core.ViewModels.ViewModelBase.CancelStatus">
            <summary>
            Called when the user hits the cancel button on the blocking status UI. Overridable so inherited VMs can customize experience when user cancels.
            </summary>
        </member>
        <member name="M:AppFramework.Core.ViewModels.ViewModelBase.NotifyPropertyChangedOnUI``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Notify subscribers on the UI thread that a property changed occurred.
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="property"></param>
        </member>
        <member name="M:AppFramework.Core.ViewModels.ViewModelBase.PreservePropertyState``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Registers properties to save/retrieve from page state during tombstoning.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="property"></param>
        </member>
        <member name="M:AppFramework.Core.ViewModels.ViewModelBase.LoadPropertyFromState(AppFramework.Core.LoadStateEventArgs,System.Reflection.PropertyInfo)">
            <summary>
            Loads a property with data from page state if found.
            </summary>
            <param name="e">Load state event args for the view.</param>
            <param name="key">Name of the property.</param>
            <param name="pi">Property info object.</param>
        </member>
        <member name="M:AppFramework.Core.ViewModels.ViewModelBase.SavePropertyToState(AppFramework.Core.SaveStateEventArgs,System.Reflection.PropertyInfo)">
            <summary>
            Saves a property to page state.
            </summary>
            <param name="e"></param>
            <param name="pi"></param>
        </member>
        <member name="M:AppFramework.Core.ViewModels.ViewModelBase.InvokeOnUIThread(System.Action,Windows.UI.Core.CoreDispatcherPriority)">
            <summary>
            Runs a function on the currently executing platform's UI thread.
            </summary>
            <param name="action">Code to be executed on the UI thread</param>
            <param name="priority">Priority to indicate to the system when to prioritize the execution of the code</param>
            <returns>Task representing the code to be executing</returns>
        </member>
        <member name="M:AppFramework.Core.ViewModels.ViewModelBase.ShowMessageBoxAsync(System.Threading.CancellationToken,System.String)">
            <summary>
            Displays a message box dialog.
            </summary>
            <param name="message">Message to display.</param>
            <param name="ct">Cancelation token</param>
            <returns>Awaitable call which returns the index of the button clicked.</returns>
        </member>
        <member name="M:AppFramework.Core.ViewModels.ViewModelBase.ShowMessageBoxAsync(System.Threading.CancellationToken,System.String,System.String)">
            <summary>
            Displays a message box dialog.
            </summary>
            <param name="message">Message to display.</param>
            <param name="title">Title of the message box.</param>
            <param name="ct">Cancelation token</param>
            <returns>Awaitable call which returns the index of the button clicked.</returns>
        </member>
        <member name="M:AppFramework.Core.ViewModels.ViewModelBase.ShowMessageBoxAsync(System.Threading.CancellationToken,System.String,System.Collections.Generic.IList{System.String},System.Int32)">
            <summary>
            Displays a message box dialog.
            </summary>
            <param name="message">Message to display.</param>
            <param name="buttonNames">List of buttons to display.</param>
            <param name="defaultIndex">Index of the default button of the dialog box.</param>
            <param name="ct">Cancelation token</param>
            <returns>Awaitable call which returns the index of the button clicked.</returns>
        </member>
        <member name="M:AppFramework.Core.ViewModels.ViewModelBase.ShowMessageBoxAsync(System.Threading.CancellationToken,System.String,System.String,System.Collections.Generic.IList{System.String},System.Int32)">
            <summary>
            Displays a message box dialog.
            </summary>
            <param name="message">Message to display.</param>
            <param name="title">Title of the message box.</param>
            <param name="buttonNames">List of buttons to display.</param>
            <param name="defaultIndex">Index of the default button of the dialog box.</param>
            <param name="ct">Cancelation token</param>
            <returns>Awaitable call which returns the index of the button clicked.</returns>
        </member>
        <member name="P:AppFramework.Core.ViewModels.ViewModelBase.RefreshCommand">
            <summary>
            Gets a command instance for refreshing the page.
            </summary>
        </member>
        <member name="P:AppFramework.Core.ViewModels.ViewModelBase.UserForcedRefresh">
            <summary>
            Gets or sets whether or not the user forced a refresh on the view.
            </summary>
        </member>
        <member name="P:AppFramework.Core.ViewModels.ViewModelBase.IsRefreshEnabled">
            <summary>
            Gets or sets whether or not the refresh button is enabled or not.
            </summary>
        </member>
        <member name="M:AppFramework.Core.ViewModels.ViewModelBase.RefreshAsync">
            <summary>
            Refreshes data on the entire page. 
            </summary>
            <returns>Task for the operation.</returns>
        </member>
        <member name="M:AppFramework.Core.ViewModels.ViewModelBase.RefreshAsync(System.Boolean)">
            <summary>
            Refreshes data on the entire page. 
            </summary>
            <param name="forceRefresh">Flag indicating a force refresh else refresh only if necessary.</param>
            <returns>Task for the operation.</returns>
        </member>
        <member name="M:AppFramework.Core.ViewModels.ViewModelBase.OnRefreshAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Inherited view models can implement their own logic as to what happens when a page refresh is requested.
            </summary>
            <param name="forceRefresh"></param>
            <param name="ct"></param>
            <returns></returns>
        </member>
        <member name="M:AppFramework.Core.ViewModels.ViewModelBase.LoadFromCacheAsync``1(System.Linq.Expressions.Expression{System.Func{``0}},System.String)">
            <summary>
            Fills a property with data from the app cache if available.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="property"></param>
            <param name="identifier"></param>
            <returns></returns>
        </member>
        <member name="M:AppFramework.Core.ViewModels.ViewModelBase.LoadFromCacheAsync``1(System.String)">
            <summary>
            Fills a property with data from the app cache if available.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AppFramework.Core.ViewModels.ViewModelBase.SaveToCacheAsync``1(System.Linq.Expressions.Expression{System.Func{``0}},System.String)">
            <summary>
            Stores a property's data to the app cache.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="property"></param>
            <param name="identifier"></param>
            <returns></returns>
        </member>
        <member name="M:AppFramework.Core.ViewModels.ViewModelBase.SaveToCacheAsync``1(System.String,``0)">
            <summary>
            Stores a property's data to the app cache.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">Unique identifier for the data</param>
            <param name="data">The data to store</param>
            <returns></returns>
        </member>
        <member name="M:AppFramework.Core.ViewModels.ViewModelBase.WaitAllAsync(System.Threading.CancellationToken,System.Threading.Tasks.Task[])">
            <summary>
            Waits for a list of task to complete before continuing execution.
            </summary>
            <param name="tasks">List of tasks to execute and wait for all to complete.</param>
            <returns>Awaitable task is returned.</returns>
        </member>
        <member name="P:AppFramework.Core.ViewModels.ViewModelBase.IsUserAuthenticated">
            <summary>
            Gets whether or not a user is authenticated in this application.
            </summary>
        </member>
        <member name="P:AppFramework.Core.ViewModels.ViewModelBase.RequiresAuthorization">
            <summary>
            True or false indicating whether or not this view model requires the user to be authenticated.
            </summary>
        </member>
        <member name="P:AppFramework.Core.ViewModels.ViewModelBase.NavigateToAccountSignoutCommand">
            <summary>
            Command to sign out of the application.
            </summary>
        </member>
        <member name="M:AppFramework.Core.ViewModels.ViewModelBase.UserSignoutAsync(System.Boolean)">
            <summary>
            Signs a users out of the application.
            </summary>
            <param name="isSilent">True to prompt the user else false to sign out immediately.</param>
            <returns>Awaitable task is returned.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "P:AppFramework.Core.ViewModels.WebViewModelBase.ViewModel" -->
        <member name="P:AppFramework.Core.ViewModels.WebViewModelBase.ForceBrowserGoBackOnNavigationBack">
            <summary>
            Gets or sets a flag indicating whether navigating back on the view should skip back override to allow browser back history to be navigated to on back presses.
            </summary>
        </member>
        <member name="P:AppFramework.Core.ViewModels.WebViewModelBase.ShowBrowser">
            <summary>
            Gets whether the browser should be visible or not.
            </summary>
        </member>
        <member name="P:AppFramework.Core.ViewModels.WebViewModelBase.BrowserRefreshCommand">
            <summary>
            Gets a command used to refresh the current view.
            </summary>
        </member>
        <member name="P:AppFramework.Core.ViewModels.WebViewModelBase.BrowserHomeCommand">
            <summary>
            Gets a command used to take the user back to the home webpage.
            </summary>
        </member>
        <member name="P:AppFramework.Core.ViewModels.WebViewModelBase.BrowserCanGoBack">
            <summary>
            Returns whether or not the browser can go back or not.
            </summary>
        </member>
        <member name="P:AppFramework.Core.ViewModels.WebViewModelBase.BrowserCanGoForward">
            <summary>
            Returns whether or not the browser can go forward or not.
            </summary>
        </member>
        <member name="M:AppFramework.Core.ViewModels.WebViewModelBase.InitialNavigation">
            <summary>
            Initial page that should be navigated on launch of the application. 
            </summary>
        </member>
        <member name="M:AppFramework.Core.ViewModels.WebViewModelBase.Navigating(System.Uri)">
            <summary>
            Notify the VM that the browser is in the process of navigating to a particular page and offer the ability for it to cancel the navigation.
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:AppFramework.Core.ViewModels.WebViewModelBase.Navigated(System.Uri,System.String)">
            <summary>
            Notify this VM that a page has been navigated to.
            </summary>
            <param name="uri"></param>
            <param name="title"></param>
        </member>
        <member name="M:AppFramework.Core.ViewModels.WebViewModelBase.NavigationFailed(System.Uri,System.Exception,System.String)">
            <summary>
            Notify this VM that a navigation failure has occurred.
            </summary>
            <param name="uri"></param>
            <param name="exception"></param>
            <param name="title"></param>
        </member>
        <member name="M:AppFramework.Core.ViewModels.WebViewModelBase.SetBrowserFunctions(System.Func{System.Boolean},System.Func{System.Boolean})">
            <summary>
            Configure the VM to perform execute custom functions when the browser can go back/forward.
            </summary>
            <param name="canGoBack"></param>
            <param name="canGoForward"></param>
        </member>
        <member name="M:AppFramework.Core.ViewModels.WebViewModelBase.BrowserRefresh">
            <summary>
            Refreshes the web browser.
            </summary>
        </member>
        <member name="M:AppFramework.Core.ViewModels.WebViewModelBase.BrowserGoBack">
            <summary>
            Navigates the web browser backwards.
            </summary>
        </member>
        <member name="M:AppFramework.Core.ViewModels.WebViewModelBase.BrowserGoForward">
            <summary>
            Navigates the web browser forward.
            </summary>
        </member>
        <member name="M:AppFramework.Core.ViewModels.WebViewModelBase.BrowserGoHome">
            <summary>
            Navigates the web browser to the home page.
            </summary>
        </member>
        <member name="M:AppFramework.Core.ViewModels.WebViewModelBase.NavigateTo(System.String)">
            <summary>
            Navigate to a specific web page.
            </summary>
            <param name="url">URL to navigate to.</param>
        </member>
        <member name="T:AppFramework.Core.InitializationModes">
            <summary>
            Enumeration used to indicate if core code is executing in a new instance of the application, 
            if it were resumed, or if executing in the background.
            </summary>
        </member>
        <member name="F:AppFramework.Core.InitializationModes.New">
            <summary>
            New instance of the application launched.
            </summary>
        </member>
        <member name="F:AppFramework.Core.InitializationModes.Restore">
            <summary>
            App restored from a suspended state.
            </summary>
        </member>
        <member name="F:AppFramework.Core.InitializationModes.Background">
            <summary>
            App background task launched.
            </summary>
        </member>
        <member name="T:AppFramework.Core.DeviceFamily">
            <summary>
            Device families supported by Windows.
            </summary>
        </member>
        <member name="T:AppFramework.Core.MapExternalOptions">
            <summary>
            Enumeration representing each way maps can be displayed.
            </summary>
        </member>
        <member name="F:AppFramework.Core.MapExternalOptions.Normal">
            <summary>
            Standard directions
            </summary>
        </member>
        <member name="F:AppFramework.Core.MapExternalOptions.DrivingDirections">
            <summary>
            Directions for driving
            </summary>
        </member>
        <member name="F:AppFramework.Core.MapExternalOptions.WalkingDirections">
            <summary>
            Directions for walking
            </summary>
        </member>
        <member name="M:AppFramework.Core.GeneralFunctions.HexToColor(System.String)">
            <summary>
            Converts a string hex color value to a Windows.UI.Color object instance.
            </summary>
            <param name="hexColor">Hex value of the color.</param>
            <returns>Windows.UI.Color instance for the specified hex color value.</returns>
        </member>
        <member name="M:AppFramework.Core.GeneralFunctions.ParseQuerystring(System.String)">
            <summary>
            Parses a query string into a dictionary of key/value pairs of each parameter in the string.
            </summary>
            <param name="querystring">Url or querystring string to parse.</param>
            <returns>Dictionary of key value pairs found within the query string.</returns>
        </member>
        <member name="M:AppFramework.Core.GeneralFunctions.CreateQuerystring(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Converts a dictionary of key/value pairs into a query string.
            </summary>
            <param name="parameters">Key/value pairs of parameters.</param>
            <returns>Query string from all the key/value pair data supplied in the dictionary.</returns>
        </member>
        <member name="M:AppFramework.Core.GeneralFunctions.CreateDictionary``2(``0,``1)">
            <summary>
            Creates a dictionary object with an initial key/value pair entry.
            </summary>
            <typeparam name="T">Type of the key</typeparam>
            <typeparam name="S">Type of the value</typeparam>
            <param name="key">Value representing the unique key</param>
            <param name="value">Value belonging to the key</param>
            <returns>Dictionary object instance.</returns>
        </member>
        <member name="P:AppFramework.Core.PlatformBase`4.ViewModel">
            <summary>
            Gets the MainViewModel global instance for the application.
            </summary>
        </member>
        <member name="P:AppFramework.Core.PlatformBase`4.AppSettingsLocal">
            <summary>
            Gets local app settings for this app.
            </summary>
        </member>
        <member name="P:AppFramework.Core.PlatformBase`4.AppSettingsRoaming">
            <summary>
            Gets roaming app settings for this app.
            </summary>
        </member>
        <member name="M:AppFramework.Core.PlatformBase`4.ResetAppSettings">
            <summary>
            Reset all the app settings back to their defaults.
            </summary>
        </member>
        <member name="M:AppFramework.Core.PlatformBase`4.SaveSettings">
            <summary>
            Saves any app settings only if the data had changed.
            </summary>
        </member>
        <member name="M:AppFramework.Core.PlatformBase`4.GenerateModelTileID(AppFramework.Core.Models.IModel)">
            <summary>
            Generates a unique tile ID used for secondary tiles based on a model instance.
            </summary>
            <param name="model">Model to convert into a unique tile ID.</param>
            <returns>String representing a unique tile ID for the model else null if not supported.</returns>
        </member>
        <member name="T:AppFramework.Core.Services.AnalyticsServiceBase">
            <summary>
            Base class providing access to the analytics service for the platform currently executing.
            </summary>
        </member>
        <member name="M:AppFramework.Core.Services.AnalyticsServiceBase.Event(System.String,System.Object)">
            <summary>
            Logs an event to the analytics service.
            </summary>
            <param name="eventName">Name of the event</param>
            <param name="value">Value to store</param>
        </member>
        <member name="M:AppFramework.Core.Services.AnalyticsServiceBase.Event(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.Double})">
            <summary>
            Logs an event to the analytics service.
            </summary>
            <param name="eventName">Name of the event</param>
            <param name="pairs">Key/Value dictionary of parameters to log to the event name specified</param>
        </member>
        <member name="M:AppFramework.Core.Services.AnalyticsServiceBase.Error(System.Exception,System.String)">
            <summary>
            Logs an error to the analytics service.
            </summary>
            <param name="message">Friendly message describing the exception or where this might have originated from</param>
            <param name="ex">The exception object</param>
        </member>
        <member name="M:AppFramework.Core.Services.AnalyticsServiceBase.SetUser(System.String)">
            <summary>
            Sets the user to the analytics providers.
            </summary>
            <param name="username">Username of the current user.</param>
        </member>
        <member name="M:AppFramework.Core.Services.AnalyticsServiceBase.SetUser(AppFramework.Core.Models.IAuthenticatedUserProfile)">
            <summary>
            Sets the user to the analytics providers.
            </summary>
            <param name="user">User object representing the current user.</param>
        </member>
        <member name="M:AppFramework.Core.Services.AnalyticsServiceBase.SetCurrentLocation(AppFramework.Core.Models.ILocationModel)">
            <summary>
            Sets the current location to the analytics service.
            </summary>
            <param name="loc">Location value to log</param>
        </member>
        <member name="T:AppFramework.Core.Services.AnalyticsManager">
            <summary>
            If no analytics service was specified, this dummy class will be used which implements AnalyticsProviderBase but does not do anything.
            Used to prevent null value exceptions when any code tries to log to the analytics adapter.
            </summary>
        </member>
        <member name="T:AppFramework.Core.Services.Analytics.FlurryAnalyticsService">
            <summary>
            Analytics wrapper for Flurry analytics service.
            </summary>
        </member>
        <member name="T:AppFramework.Core.Services.AppInfoProviderBase">
            <summary>
            Base class providing access to the application currently executing specific to the platform this app is executing on.
            </summary>
        </member>
        <member name="P:AppFramework.Core.Services.AppInfoProviderBase.AppID">
            <summary>
            Gets the AppID of the application.
            </summary>
        </member>
        <member name="P:AppFramework.Core.Services.AppInfoProviderBase.VersionNumber">
            <summary>
            Gets version number of the application currently executing.
            </summary>
        </member>
        <member name="P:AppFramework.Core.Services.AppInfoProviderBase.StoreURL">
            <summary>
            Gets the deep link URL to where this application can be downloaded from.
            </summary>
        </member>
        <member name="P:AppFramework.Core.Services.AppInfoProviderBase.IsTrial">
            <summary>
            Gets whether or not this application is running in trial mode.
            </summary>
        </member>
        <member name="P:AppFramework.Core.Services.AppInfoProviderBase.IsTrialExpired">
            <summary>
            Gets whether or not this application trial is expired.
            </summary>
        </member>
        <member name="P:AppFramework.Core.Services.AppInfoProviderBase.TrialExpirationDate">
            <summary>
            Gets the DateTime of when this application's trial will expire.
            </summary>
        </member>
        <member name="M:AppFramework.Core.Services.AppInfoProviderBase.GetDeepLink(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Creates a deep link to your application with the specified arguments.
            </summary>
            <param name="arguments">Dictionary of different parameters to create a query string for the arguments.</param>
            <returns>String representing the deep link.</returns>
        </member>
        <member name="M:AppFramework.Core.Services.AppInfoProviderBase.GetDeepLink(System.String)">
            <summary>
            Creates a deep link to your application with the specified arguments.
            </summary>
            <param name="arguments">String representation of the arguments.</param>
            <returns>String representing the deep link.</returns>
        </member>
        <member name="M:AppFramework.Core.Services.AppInfoProviderBase.GetAppFrameworkVersionAsync">
            <summary>
            Gets the version number of the AppFramework package being used in this app.
            </summary>
            <returns>Version number of AppFramework package</returns>
        </member>
        <member name="E:AppFramework.Core.Services.AuthorizationManagerBase.UserAuthenticatedStatusChanged">
            <summary>
            Event used to notify subscribed objects of when a user logs in or out.
            </summary>
        </member>
        <member name="M:AppFramework.Core.Services.AuthorizationManagerBase.IsAuthenticated">
            <summary>
            Indicates whether or not a user is authenticated into this app.
            </summary>
            <returns>True if the user is authenticated else false.</returns>
        </member>
        <member name="M:AppFramework.Core.Services.AuthorizationManagerBase.NotifyUserAuthenticated">
            <summary>
            Notify any subscribers that the user authentication status has changed.
            </summary>
        </member>
        <member name="M:AppFramework.Core.Services.AuthorizationManagerBase.SetUserAsync(AppFramework.Core.Models.IAuthenticatedUserProfile)">
            <summary>
            Sets the current user of the app.
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:AppFramework.Core.Services.AuthorizationManagerBase.SignoutAsync">
            <summary>
            Signs the user out of the application and removes and credential data from storage / credential locker.
            </summary>
            <returns>Awaitable task is returned.</returns>
        </member>
        <member name="M:AppFramework.Core.Services.AuthorizationManagerBase.GetRefreshAccessToken(System.Threading.CancellationToken)">
            <summary>
            Gets a refresh token on launches of this app if the user was previously authenticated.
            </summary>
            <param name="ct">Cancellation token.</param>
            <returns>User object representing the logged in user.</returns>
        </member>
        <member name="P:AppFramework.Core.Services.AuthorizationManagerBase`1.CurrentUser">
            <summary>
            Gets or sets the current user object representing a logged in user.
            </summary>
        </member>
        <member name="T:AppFramework.Core.Services.BackgroundTasksManagerBase">
            <summary>
            Task manager is responsible for registering and unregistering all background tasks used by this application.
            </summary>
        </member>
        <member name="P:AppFramework.Core.Services.BackgroundTasksManagerBase.ManageBackgroundTasksCommand">
            <summary>
            Manage background apps from the Windows Settings app.
            </summary>
        </member>
        <member name="M:AppFramework.Core.Services.BackgroundTasksManagerBase.RegisterAllAsync">
            <summary>
            Registers all background tasks related to this application.
            </summary>
            <returns>Awaitable task is returned.</returns>
        </member>
        <member name="M:AppFramework.Core.Services.BackgroundTasksManagerBase.CheckIfAllowed">
            <summary>
            Indicates whether or not the app has permissions to run background tasks.
            </summary>
            <returns>True if allowed else false.</returns>
        </member>
        <member name="M:AppFramework.Core.Services.BackgroundTasksManagerBase.SignoutAsync">
            <summary>
            Removes background task registrations when the user signs out of the app.
            </summary>
            <returns>Awaitable task is returned.</returns>
        </member>
        <member name="M:AppFramework.Core.Services.BackgroundTasksManagerBase.RemoveAll">
            <summary>
            Removes all registered background tasks related to this application.
            </summary>
        </member>
        <member name="M:AppFramework.Core.Services.BackgroundTasksManagerBase.RegisterBackgroundTaskAsync(System.String,System.String,Windows.ApplicationModel.Background.IBackgroundTrigger,Windows.ApplicationModel.Background.IBackgroundCondition)">
            <summary>
            Register a background task with the specified taskEntryPoint, name, trigger,
            and condition (optional).
            </summary>
            <param name="taskEntryPoint">Task entry point for the background task.</param>
            <param name="name">A name for the background task.</param>
            <param name="trigger">The trigger for the background task.</param>
            <param name="condition">An optional conditional event that must be true for the task to fire.</param>
        </member>
        <member name="M:AppFramework.Core.Services.BackgroundTasksManagerBase.Remove(System.String)">
            <summary>
            Unregister background tasks with specified name.
            </summary>
            <param name="name">Name of the background task to unregister.</param>
        </member>
        <member name="T:AppFramework.Core.Services.CryptographyProvider">
            <summary>
            Interface used to access the cryptography functions of the executing platform. Additional details of encryption implementation method: http://msdn.microsoft.com/en-us/library/windows/apps/windows.security.cryptography.dataprotection.dataprotectionprovider.aspx
            </summary>
        </member>
        <member name="M:AppFramework.Core.Services.CryptographyProvider.EncryptAsync(System.String)">
            <summary>
            Encrypts a string
            </summary>
            <param name="message">String to encrypt</param>
            <returns>Encrypted string</returns>
        </member>
        <member name="M:AppFramework.Core.Services.CryptographyProvider.DecryptAsync(System.String)">
            <summary>
            Decrypts an encrypted string
            </summary>
            <param name="message">String to decrypt</param>
            <returns>Decrypted string inside the encrypted param string</returns>
        </member>
        <member name="M:AppFramework.Core.Services.EmailProvider.SendEmailAsync(System.String,System.String,System.String[],System.String[],System.String[],Windows.Storage.IStorageFile[])">
            <summary>
            Send an e-mail.
            </summary>
            <param name="subject">Subject of the message</param>
            <param name="body">Body of the message</param>
            <param name="toRecipients">To recipients</param>
            <param name="ccRecipients">CC recipients</param>
            <param name="bccRecipients">BCC recipients</param>
            <param name="attachments">File attachments to the message.</param>
            <returns>Awaitable task is returned.</returns>
        </member>
        <member name="M:AppFramework.Core.Services.EmailProvider.SendEmailAsync(System.String,System.String,System.String,Windows.Storage.IStorageFile[])">
            <summary>
            Send an e-mail.
            </summary>
            <param name="subject">Subject of the message</param>
            <param name="body">Body of the message</param>
            <param name="toRecipients">To recipients</param>
            <param name="attachments">File attachments to the message.</param>
            <returns>Awaitable task is returned.</returns>
        </member>
        <member name="M:AppFramework.Core.Services.EmailProvider.SendEmailAsync(System.String,System.String,System.String[],System.String[],Windows.Storage.IStorageFile[])">
            <summary>
            Send an e-mail.
            </summary>
            <param name="subject">Subject of the message</param>
            <param name="body">Body of the message</param>
            <param name="toRecipients">To recipients</param>
            <param name="ccRecipients">CC recipients</param>
            <param name="attachments">File attachments to the message.</param>
            <returns>Awaitable task is returned.</returns>
        </member>
        <member name="T:AppFramework.Core.Services.GeocodingService">
            <summary>
            Base class providing access to the geocoding service on the executing platform.
            </summary>
        </member>
        <member name="M:AppFramework.Core.Services.GeocodingService.GetAddressAsync(AppFramework.Core.Models.ILocationModel,System.Threading.CancellationToken)">
            <summary>
            Retrieves a formatted address for a given location.
            </summary>
            <param name="loc">Location to geocode.</param>
            <returns>String name representing the specified location.</returns>
        </member>
        <member name="M:AppFramework.Core.Services.GeocodingService.GetCityStateAsync(AppFramework.Core.Models.ILocationModel,System.Threading.CancellationToken)">
            <summary>
            Retrieves the city and state for a given location.
            </summary>
            <param name="loc">Location to geocode.</param>
            <param name="ct">Cancellation token.</param>
            <returns>String name representing the specified location.</returns>
        </member>
        <member name="M:AppFramework.Core.Services.GeocodingService.GetCityStateCountryAsync(AppFramework.Core.Models.ILocationModel,System.Threading.CancellationToken)">
            <summary>
            Retrieves the city, state, and country for a given location.
            </summary>
            <param name="loc">Location to geocode.</param>
            <param name="ct">Cancellation token.</param>
            <returns>String name representing the specified location.</returns>
        </member>
        <member name="M:AppFramework.Core.Services.GeocodingService.GetCountryAsync(AppFramework.Core.Models.ILocationModel,System.Threading.CancellationToken)">
            <summary>
            Retrieves the country name for a given location.
            </summary>
            <param name="loc">Location to geocode.</param>
            <param name="ct">Cancellation token.</param>
            <returns>String name representing the specified location.</returns>
        </member>
        <member name="M:AppFramework.Core.Services.GeocodingService.ConcatAddressParts(System.String[])">
            <summary>
            Concatonates strings for user display with comma separation.
            </summary>
            <param name="parts">Strings to concat.</param>
            <returns>Concatonated string for user display.</returns>
        </member>
        <member name="M:AppFramework.Core.Services.GeocodingService.ConcatAddressParts(System.Int32,System.String[])">
            <summary>
            Concatonates strings for user display with comma separation.
            </summary>
            <param name="maxParts">Max number of string parts to use from the array.</param>
            <param name="parts">Strings to concat.</param>
            <returns>Concatonated string for user display.</returns>
        </member>
        <member name="P:AppFramework.Core.Services.GeolocationService.Status">
            <summary>
            Gets the status of the location service of the platform currently executing.
            </summary>
        </member>
        <member name="E:AppFramework.Core.Services.GeolocationService.LocationChanged">
            <summary>
            Event which notifies you of when a location changed was detected.
            </summary>
        </member>
        <member name="P:AppFramework.Core.Services.GeolocationService.CurrentLocation">
            <summary>
            Gets or sets the last known location found. The location will be stores by the storage manager so that the susquent load of the platform has a location immediately
            available to use if needed.
            </summary>
        </member>
        <member name="P:AppFramework.Core.Services.GeolocationService.ManageLocationServicesCommand">
            <summary>
            Manage location settings in the Windows Settings app.
            </summary>
        </member>
        <member name="M:AppFramework.Core.Services.GeolocationService.GetSingleCoordinateAsync(System.Boolean,System.Double,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets the current location for the user.
            </summary>
            <param name="highAccuracy">True if the system should find a highly accurate location or false if a quicker location should be returned. High accuracy takes more
            time to determine the user's location.</param>
            <returns>Location information representing the current location of the user.</returns>
        </member>
        <member name="M:AppFramework.Core.Services.GeolocationService.StartTrackingAsync(System.Boolean,System.Double,System.UInt32)">
            <summary>
            Starts location tracking for the platform currently executing.
            </summary>
            <param name="highAccuracy">True if the system should find a highly accurate location or false if a quicker location should be returned. High accuracy takes more
            time to determine the user's location.</param>
        </member>
        <member name="M:AppFramework.Core.Services.GeolocationService.StopTracking">
            <summary>
            Stops location tracking for the platform currently executing.
            </summary>
        </member>
        <member name="M:AppFramework.Core.Services.GeolocationService.NotifyLocationChangedEvent">
            <summary>
            Notifies subscribers that the location changed.
            </summary>
        </member>
        <member name="T:AppFramework.Core.Services.LocationChangedEventArgs">
            <summary>
            Event args for when location changed event occurs.
            </summary>
        </member>
        <member name="T:AppFramework.Core.Services.JumplistManager">
            <summary>
            Base class providing access to the application currently executing specific to the platform this app is executing on.
            </summary>
        </member>
        <member name="P:AppFramework.Core.Services.JumplistManager.ClearCommand">
            <summary>
            Clears the task bar jump list of this application.
            </summary>
        </member>
        <member name="M:AppFramework.Core.Services.JumplistManager.SignoutAsync">
            <summary>
            Clear out any jump list items on user signout to protect user senstive data.
            </summary>
            <returns>Awaitable task is returned.</returns>
        </member>
        <member name="M:AppFramework.Core.Services.JumplistManager.AddItemAsync(AppFramework.Core.Services.JumpItemInfo)">
            <summary>
            Adds an item to the app's jump list.
            </summary>
            <param name="info"></param>
            <returns>Awaitable task is returned.</returns>
        </member>
        <member name="M:AppFramework.Core.Services.JumplistManager.ClearAsync">
            <summary>
            Clears all items from the jump list.
            </summary>
            <returns>Awaitable task is returned.</returns>
        </member>
        <member name="P:AppFramework.Core.Services.LoggingService.CurrentLevel">
            <summary>
            Gets the current level of events for which logging is storing.
            </summary>
        </member>
        <member name="P:AppFramework.Core.Services.LoggingService.Messages">
            <summary>
            Gets the list of messages that have been logged.
            </summary>
        </member>
        <member name="P:AppFramework.Core.Services.LoggingService.SendSupportEmailCommand">
            <summary>
            Command to initiate sending an email to support with device info.
            </summary>
        </member>
        <member name="M:AppFramework.Core.Services.LoggingService.Log(AppFramework.Core.LogLevels,System.String,System.Object[])">
            <summary>
            Logs an event.
            </summary>
            <param name="level">Level of event.</param>
            <param name="message">Message to log.</param>
            <param name="args">Arguments to string.Format into the specified message.</param>
        </member>
        <member name="M:AppFramework.Core.Services.LoggingService.LogError(System.Exception,System.String,System.Object[])">
            <summary>
            Logs an error event.
            </summary>
            <param name="ex"></param>
            <param name="message">Message to log.</param>
            <param name="args">Arguments to string.Format into the specified message.</param>
        </member>
        <member name="M:AppFramework.Core.Services.LoggingService.LogErrorFatal(System.Exception,System.String,System.Object[])">
            <summary>
            Logs a fatal event.
            </summary>
            <param name="ex"></param>
            <param name="message">Message to log.</param>
            <param name="args">Arguments to string.Format into the specified message.</param>
        </member>
        <member name="M:AppFramework.Core.Services.LoggingService.CheckForFatalErrorReportsAsync(AppFramework.Core.ViewModels.IViewModel)">
            <summary>
            Checks to see if any error logs were stored from an app crash and prompts the user to send to the developer.
            </summary>
            <param name="vm">ViewModel instance that is used to show a message box from.</param>
            <returns>Awaitable task is returned.</returns>
        </member>
        <member name="M:AppFramework.Core.Services.LoggingService.SendSupportEmailAsync">
            <summary>
            Sends an email to support with device information.
            </summary>
        </member>
        <member name="M:AppFramework.Core.Services.LoggingService.GenerateApplicationReport(System.Exception)">
            <summary>
            Builds an application report with system details and logged messages.
            </summary>
            <param name="ex">Exception object if available.</param>
            <returns>String representing the system and app logging data.</returns>
        </member>
        <member name="T:AppFramework.Core.Services.LoggingService.ILogger">
            <summary>
            Interfaced use to log data to custom sources.
            </summary>
        </member>
        <member name="T:AppFramework.Core.Services.LoggingService.DebugLoggerProvider">
            <summary>
            Logger implementation for logging to the debug window.
            </summary>
        </member>
        <member name="T:AppFramework.Core.Services.LoggingService.UwpConsoleOutputProvider">
            <summary>
            UWP console debugger from Michael Scherotter (https://blogs.msdn.microsoft.com/synergist/2016/08/20/console-ouptut-my-new-debugging-and-testing-tool-for-windows/)
            </summary>
        </member>
        <member name="P:AppFramework.Core.Services.NavigationManagerBase.Frame">
            <summary>
            Gets or sets the frame inside a Window. If not set, the ParentFrame will be returned (the frame inside a Window object).
            </summary>
        </member>
        <member name="P:AppFramework.Core.Services.NavigationManagerBase.ParentFrame">
            <summary>
            Gets access to the Frame inside a Window object.
            </summary>
        </member>
        <member name="P:AppFramework.Core.Services.NavigationManagerBase.IsChildFramePresent">
            <summary>
            Indicates if the Window currently has a child frame. Used for SplitView pages where there is a child frame.
            </summary>
        </member>
        <member name="M:AppFramework.Core.Services.NavigationManagerBase.SerializeParameter(System.Object)">
            <summary>
            Serializes a parameter to string if not a primitive type so that app suspension can properly happen.
            </summary>
            <param name="obj">Parameter object to serialize.</param>
            <returns></returns>
        </member>
        <member name="M:AppFramework.Core.Services.NavigationManagerBase.CanGoBack">
            <summary>
            Indicates whether or not a back navigation can occur. Will also check to see if the frame contains a WebView and if the WebView can go back as well.
            </summary>
            <returns>True if a back navigation can occur else false.</returns>
        </member>
        <member name="M:AppFramework.Core.Services.NavigationManagerBase.CanGoForward">
            <summary>
            Indicates whether or not a forward navigation can occur. Will also check to see if the frame contains a WebView and if the WebView can go forward as well.
            </summary>
            <returns>True if a forward navigation can occur else false.</returns>
        </member>
        <member name="M:AppFramework.Core.Services.NavigationManagerBase.GoBack">
            <summary>
            Navigates back one page. Will also check to see if the frame contains a WebView and if the WebView can go back, it will perform back on that WebView instead.
            </summary>
            <returns>True if a back navigation occurred else false.</returns>
        </member>
        <member name="P:AppFramework.Core.Services.NavigationManagerBase.GoBackCommand">
            <summary>
            Command to access backwards page navigation..
            </summary>
        </member>
        <member name="M:AppFramework.Core.Services.NavigationManagerBase.GoForward">
            <summary>
            Navigates forward one page. Will also check to see if the frame contains a WebView and if the WebView can go forward, it will perform forward on that WebView instead.
            </summary>
            <returns>True if a forward navigation occurred else false.</returns>
        </member>
        <member name="P:AppFramework.Core.Services.NavigationManagerBase.GoForwardCommand">
            <summary>
            Command to access forard page navigation.
            </summary>
        </member>
        <member name="M:AppFramework.Core.Services.NavigationManagerBase.ViewModelHandleBackNavigation(Windows.UI.Xaml.Controls.Frame)">
            <summary>
            Checks a ViewModels to see if it will allow a nagivation back.
            </summary>
            <param name="frame">Frame to check.</param>
            <returns>True if allowed else false.</returns>
        </member>
        <member name="M:AppFramework.Core.Services.NavigationManagerBase.ViewModelHandleForwardNavigation(Windows.UI.Xaml.Controls.Frame)">
            <summary>
            Checks a ViewModels to see if it will allow a nagivation forward.
            </summary>
            <param name="frame">Frame to check.</param>
            <returns>True if allowed else false.</returns>
        </member>
        <member name="M:AppFramework.Core.Services.NavigationManagerBase.ClearBackstack">
            <summary>
            Clears the navigation backstack of the window.
            </summary>
        </member>
        <member name="M:AppFramework.Core.Services.NavigationManagerBase.RemovePreviousPage">
            <summary>
            Removes the previous page in the navigation backstack.
            </summary>
        </member>
        <member name="M:AppFramework.Core.Services.NavigationManagerBase.UpdateTitleBarBackButton">
            <summary>
            Updates the navigate back button in the app window's title bar.
            </summary>
        </member>
        <member name="M:AppFramework.Core.Services.NavigationManagerBase.OnInitializeAsync">
            <summary>
            Initialization logic which is called on launch of this application.
            </summary>
        </member>
        <member name="M:AppFramework.Core.Services.NavigationManagerBase.RegisterCoreWindow">
            <summary>
            Registers the window with all window events.
            </summary>
        </member>
        <member name="M:AppFramework.Core.Services.NavigationManagerBase.HandleActivation(Windows.ApplicationModel.Activation.IActivatedEventArgs,Windows.UI.Xaml.Controls.Frame)">
            <summary>
            Handle activation of the event and any navigation necessary.
            </summary>
            <param name="e">Activation args.</param>
            <param name="rootFrame">Root frame of the app.</param>
        </member>
        <member name="M:AppFramework.Core.Services.NavigationManagerBase.OnActivation(Windows.ApplicationModel.Activation.LaunchActivatedEventArgs)">
            <summary>
            Handles actions from primary and secondary tiles and jump lists.
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:AppFramework.Core.Services.NavigationManagerBase.OnActivation(Windows.ApplicationModel.Activation.ToastNotificationActivatedEventArgs)">
            <summary>
            Handles activations from toasts activations.
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:AppFramework.Core.Services.NavigationManagerBase.OnActivation(Windows.ApplicationModel.Activation.ProtocolActivatedEventArgs)">
            <summary>
            Handles protocol activation i.e. contoso:4
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:AppFramework.Core.Services.NavigationManagerBase.OnActivation(Windows.ApplicationModel.Activation.VoiceCommandActivatedEventArgs)">
            <summary>
            Handles voice commands from Cortana integration
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:AppFramework.Core.Services.NavigationManagerBase.Exit">
            <summary>
            Exits an application.
            </summary>
        </member>
        <member name="M:AppFramework.Core.Services.NavigationManagerBase.SignoutAsync">
            <summary>
            On signout of a user, close all secondary windows that might be open.
            </summary>
            <returns></returns>
        </member>
        <member name="P:AppFramework.Core.Services.NavigationManagerBase.MapExternalCommand">
            <summary>
            Command to access the external maps view.
            </summary>
        </member>
        <member name="P:AppFramework.Core.Services.NavigationManagerBase.MapExternalDrivingCommand">
            <summary>
            Command to access the device's map driving directions view.
            </summary>
        </member>
        <member name="P:AppFramework.Core.Services.NavigationManagerBase.MapExternalWalkingCommand">
            <summary>
            Command to access the device's map walking directions view.
            </summary>
        </member>
        <member name="M:AppFramework.Core.Services.NavigationManagerBase.WebBrowser(System.String)">
            <summary>
            Navigates to an external web browser.
            </summary>
            <param name="webAddress">URL to navigate to.</param>
        </member>
        <member name="P:AppFramework.Core.Services.NavigationManagerBase.WebViewCommand">
            <summary>
            Command to navigate to the internal web view.
            </summary>
        </member>
        <member name="P:AppFramework.Core.Services.NavigationManagerBase.WebBrowserCommand">
            <summary>
            Command to navigate to the external web browser.
            </summary>
        </member>
        <member name="M:AppFramework.Core.Services.NavigationManagerBase.Navigate(AppFramework.Core.Models.NavigationRequest)">
            <summary>
            Navigates to a page specified in the navigation request object.
            </summary>
            <param name="request">Request object instance.</param>
        </member>
        <member name="M:AppFramework.Core.Services.NavigationManagerBase.NewWindow(System.Type,System.Object)">
            <summary>
            Launches another window with the specified page type.
            </summary>
            <param name="viewType">Type of the page requested in the secondary window.</param>
            <param name="parameter">Page parameter to pass to the new page instance.</param>
            <returns>Awaitable task is returned.</returns>
        </member>
        <member name="P:AppFramework.Core.Services.NavigationManagerBase.NewWindowCommand">
            <summary>
            Command to navigate to the account forgot crentials view.
            </summary>
        </member>
        <member name="P:AppFramework.Core.Services.NavigationManagerBase.HomeCommand">
            <summary>
            Command to access backwards page navigation..
            </summary>
        </member>
        <member name="P:AppFramework.Core.Services.NavigationManagerBase.ModelCommand">
            <summary>
            Command to access navigating to an instance of a model (Navigation manager handles actually forwarding to the appropriate view for 
            the model pass into a parameter. 
            </summary>
        </member>
        <member name="P:AppFramework.Core.Services.NavigationManagerBase.SettingsCommand">
            <summary>
            Command to navigate to the settings view.
            </summary>
        </member>
        <member name="P:AppFramework.Core.Services.NavigationManagerBase.PrivacyPolicyCommand">
            <summary>
            Command to navigate to the application's privacy policy view.
            </summary>
        </member>
        <member name="P:AppFramework.Core.Services.NavigationManagerBase.TermsOfServiceCommand">
            <summary>
            Command to navigate to the application's terms of service view.
            </summary>
        </member>
        <member name="M:AppFramework.Core.Services.NavigationManagerBase.HardwareButtons_BackPressed(System.Object,Windows.Phone.UI.Input.BackPressedEventArgs)">
            <summary>
            Invoked when the hardware back button is pressed. For Windows Phone only.
            </summary>
            <param name="sender">Instance that triggered the event.</param>
            <param name="e">Event data describing the conditions that led to the event.</param>
        </member>
        <member name="M:AppFramework.Core.Services.NavigationManagerBase.CoreDispatcher_AcceleratorKeyActivated(Windows.UI.Core.CoreDispatcher,Windows.UI.Core.AcceleratorKeyEventArgs)">
            <summary>
            Invoked on every keystroke, including system keys such as Alt key combinations, when
            this page is active and occupies the entire window.  Used to detect keyboard navigation
            between pages even when the page itself doesn't have focus.
            </summary>
            <param name="sender">Instance that triggered the event.</param>
            <param name="e">Event data describing the conditions that led to the event.</param>
        </member>
        <member name="M:AppFramework.Core.Services.NavigationManagerBase.CoreWindow_PointerPressed(Windows.UI.Core.CoreWindow,Windows.UI.Core.PointerEventArgs)">
            <summary>
            Invoked on every mouse click, touch screen tap, or equivalent interaction when this
            page is active and occupies the entire window.  Used to detect browser-style next and
            previous mouse button clicks to navigate between pages.
            </summary>
            <param name="sender">Instance that triggered the event.</param>
            <param name="e">Event data describing the conditions that led to the event.</param>
        </member>
        <member name="M:AppFramework.Core.Services.NavigationParameterSerializer.Serialize(System.Object)">
            <summary>
            Serializes an object if its a non-primitive type.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:AppFramework.Core.Services.NavigationParameterSerializer.Deserialize(System.Object)">
            <summary>
            Deserializes an object if its a string and has serialization info else returns the object as-is.
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:AppFramework.Core.Services.NotificationsManagerBase.OnInitializeAsync">
            <summary>
            Initialization logic which is called on launch of this application.
            </summary>
        </member>
        <member name="M:AppFramework.Core.Services.NotificationsManagerBase.SignoutAsync">
            <summary>
            On signout of a user, clear tiles, toasts, notifications
            </summary>
            <returns></returns>
        </member>
        <member name="M:AppFramework.Core.Services.NotificationsManagerBase.HasTile(AppFramework.Core.Models.IModel)">
            <summary>
            Checks to see if a tile exists associated the the model specified. How it determines which tile to check against is determined by the
            class implementing this interface. If the platform does not support tiles, then the implementation should do nothing.
            </summary>
            <param name="model">Model which contains the data to find the tile.</param>
            <returns>True if a tile exists associated to the model specified or false if no tile was found.</returns>
        </member>
        <member name="M:AppFramework.Core.Services.NotificationsManagerBase.UpdateAllSecondaryTilesAsync(System.Threading.CancellationToken)">
            <summary>
            Updates all tiles or any other UI features currently in use on the device.
            </summary>
        </member>
        <member name="M:AppFramework.Core.Services.NotificationsManagerBase.DeleteTileAsync(AppFramework.Core.Models.IModel)">
            <summary>
            Deletes a tile associated to the model specified. How it determines which tile to delete is determined by the class implementing this
            interface. If the platform does not support tiles, then the implementation should do nothing.
            </summary>
            <param name="model">Model which contains the data necessary to find the tile to delete.</param>
        </member>
        <member name="M:AppFramework.Core.Services.NotificationsManagerBase.ClearTile(AppFramework.Core.Models.IModel)">
            <summary>
            Clears a tile associated to the model specified. How it determines which tile(s) to clear is determined by the class implementing this
            interface. If the platform does not support tiles, then the implementation should do nothing.
            </summary>
            <param name="model">Model which contains the data necessary to find the tile to clear.</param>
        </member>
        <member name="T:AppFramework.Core.Services.RatingsManager">
            <summary>
            Used to determine when and if a user should be prompted to rate the application being executed.
            </summary>
        </member>
        <member name="P:AppFramework.Core.Services.RatingsManager.NavigateToRateAppCommand">
            <summary>
            Command to navigate to the platform's rate application functionality.
            </summary>
        </member>
        <member name="M:AppFramework.Core.Services.RatingsManager.CheckForRatingsPromptAsync(AppFramework.Core.ViewModels.IViewModel)">
            <summary>
            Executes business logic to determine if an instance of the application should prompt the user to solicit user ratings.
            If it determines it should, the dialog to solicit ratings will be displayed.
            </summary>
            <returns>Awaitable task is returned.</returns>
        </member>
        <member name="M:AppFramework.Core.Services.RatingsManager.PromptForRatingAsync(AppFramework.Core.ViewModels.IViewModel)">
            <summary>
            Displays a dialog to the user requesting the user to provide ratings/feedback for this application.
            </summary>
            <returns>Awaitable task is returned.</returns>
        </member>
        <member name="M:AppFramework.Core.Services.RatingsManager.RateApplicationAsync">
            <summary>
            Takes the user to the rate application dialog.
            </summary>
            <returns></returns>
        </member>
        <member name="P:AppFramework.Core.Services.ServiceBase.Initialized">
            <summary>
            Indicates whether or not this adapter has been initialized by the PlatformAdaptereCore Initialization method.
            </summary>
        </member>
        <member name="M:AppFramework.Core.Services.ServiceBase.InitializeAsync">
            <summary>
            Initialization logic which is called on launch of this application.
            </summary>
        </member>
        <member name="M:AppFramework.Core.Services.ServiceBase.OnInitializeAsync">
            <summary>
            Custom initialization logic for this service.
            </summary>
        </member>
        <member name="P:AppFramework.Core.Services.SharingManagerBase.ShareCommand">
            <summary>
            Command to navigate to the share functionality.
            </summary>
        </member>
        <member name="M:AppFramework.Core.Services.SharingManagerBase.SetShareContent(Windows.ApplicationModel.DataTransfer.DataRequest,AppFramework.Core.Models.IModel)">
            <summary>
            Method to populate DataRequest object which is then shared with the OS sharing feature.
            </summary>
            <param name="request"></param>
            <param name="model"></param>
        </member>
        <member name="M:AppFramework.Core.Services.SharingManagerBase.Share(AppFramework.Core.Models.IModel)">
            <summary>
            Share a model of data with Windows.
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:AppFramework.Core.Services.DefaultSharingManager.SetShareContent(Windows.ApplicationModel.DataTransfer.DataRequest,AppFramework.Core.Models.IModel)">
            <summary>
            Shares the sz
            </summary>
            <param name="request"></param>
            <param name="model"></param>
        </member>
        <member name="T:AppFramework.Core.Services.StorageManager">
            <summary>
            Base class for accessing storage on the platform currently being executed.
            </summary>
        </member>
        <member name="M:AppFramework.Core.Services.StorageManager.LoadCredential(System.String,System.String,System.String@)">
            <summary>
            Loads a user credential from secure storage.
            </summary>
            <param name="credentialName">Name of the credential set.</param>
            <param name="username">Username to retrieve.</param>
            <param name="password">Reference parameter contains the stored password.</param>
            <returns>True if the credential was found else false.</returns>
        </member>
        <member name="M:AppFramework.Core.Services.StorageManager.LoadCredential(System.String,System.String@,System.String@)">
            <summary>
            Loads a user credential set from secure storage.
            </summary>
            <param name="credentialName">Name of the credential set.</param>
            <param name="username">Reference parameter contains the stored username.</param>
            <param name="password">Reference parameter contains the stored password.</param>
            <returns>True if the credential was found else false.</returns>
        </member>
        <member name="M:AppFramework.Core.Services.StorageManager.SaveCredential(System.String,System.String,System.String)">
            <summary>
            Saves a user's credentials to secure storage.
            </summary>
            <param name="credentialName">Name of the credential set.</param>
            <param name="username">Username to store.</param>
            <param name="password">Password to store.</param>
        </member>
        <member name="M:AppFramework.Core.Services.StorageManager.LoadSetting``1(System.String,AppFramework.Core.SerializerTypes)">
            <summary>
            Loads a setting from storage.
            </summary>
            <typeparam name="T">Type of the object stored in settings.</typeparam>
            <param name="key">Unique key for the setting.</param>
            <param name="serializerType">How the setting should be serialized to storage.</param>
            <returns>Object instance of the type specified if found else null.</returns>
        </member>
        <member name="M:AppFramework.Core.Services.StorageManager.LoadSetting``1(System.String,Windows.Storage.ApplicationDataContainer,AppFramework.Core.SerializerTypes)">
            <summary>
            Retrieves a setting from storage.
            </summary>
            <typeparam name="T">Type of the stored value.</typeparam>
            <param name="key">Unique key for the setting.</param>
            <param name="location">Location the setting should be retrieved from.</param>
            <param name="serializerType">How the setting should be serialized to storage.</param>
            <returns>Awaitable task is returned.</returns>
        </member>
        <member name="M:AppFramework.Core.Services.StorageManager.ContainsSetting(System.String)">
            <summary>
            Checks to see if a setting exists in the LocalSettings container or not.
            </summary>
            <param name="key">Unique key for the setting.</param>
            <returns>True if found else false.</returns>
        </member>
        <member name="M:AppFramework.Core.Services.StorageManager.ContainsSetting(System.String,Windows.Storage.ApplicationDataContainer)">
            <summary>
            Checks to see if a setting exists or not.
            </summary>
            <param name="key">Unique key for the setting.</param>
            <param name="container">Container to check.</param>
            <returns>True if found else false.</returns>
        </member>
        <member name="M:AppFramework.Core.Services.StorageManager.SaveSetting(System.String,System.Object,AppFramework.Core.SerializerTypes)">
            <summary>
            Saves a setting to the LocalSettings container.
            </summary>
            <param name="key">Unique key for the setting.</param>
            <param name="obj">Object to store in the LocalSettings container.</param>
            <param name="serializerType">How the setting should be serialized to storage.</param>
        </member>
        <member name="M:AppFramework.Core.Services.StorageManager.SaveSetting(System.String,System.Object,Windows.Storage.ApplicationDataContainer,AppFramework.Core.SerializerTypes)">
            <summary>
            Saves a setting to storage.
            </summary>
            <param name="key">Unique key for the setting.</param>
            <param name="obj">Value to store.</param>
            <param name="location">Location the setting should be stored to.</param>
            <param name="serializerType">How the setting should be deserialized from storage.</param>
        </member>
        <member name="M:AppFramework.Core.Services.StorageManager.ReadFileAsStringAsync(System.String,Windows.Storage.StorageFolder)">
            <summary>
            Loads a file from storage.
            </summary>
            <param name="path">Path and name of the file.</param>
            <param name="folder">Which storage location to retrieve the file from.</param>
            <returns>String contents from the file or null if it doesn't exists.</returns>
        </member>
        <member name="M:AppFramework.Core.Services.StorageManager.LoadFileAsync``1(System.String,Windows.Storage.StorageFolder,AppFramework.Core.SerializerTypes)">
            <summary>
            Loads a file from storage.
            </summary>
            <typeparam name="T">Type representing the data stored.</typeparam>
            <param name="path">Path and name of the file.</param>
            <param name="folder">Which storage location to retrieve the file from.</param>
            <returns>String contents from the file or null if it doesn't exists.</returns>
            <returns>Awaitable task of type specified.</returns>
        </member>
        <member name="M:AppFramework.Core.Services.StorageManager.GetFileAsync(System.String,Windows.Storage.StorageFolder)">
            <summary>
            Gets a file by path.
            </summary>
            <param name="path">Path of the file.</param>
            <param name="folder">StorageFolder to check for a file.</param>
            <returns>IStorageFile instance if found else null.</returns>
        </member>
        <member name="M:AppFramework.Core.Services.StorageManager.SaveFileAsync(System.String,System.Object,Windows.Storage.StorageFolder,AppFramework.Core.SerializerTypes)">
            <summary>
            Saves a string to file in storage.
            </summary>
            <param name="path">Path and name of the file.</param>
            <param name="data">Data to write to file.</param>
            <param name="location">Location to store the file.</param>
            <returns>Awaitable task returning the final file path in storage.</returns>
        </member>
        <member name="M:AppFramework.Core.Services.StorageManager.DeleteFileAsync(System.String,Windows.Storage.StorageFolder)">
            <summary>
            Deletes a file from storage.
            </summary>
            <param name="path">Path and name of file.</param>
            <param name="folder">Location where the file is stored.</param>
            <returns>Awaitable task.</returns>
        </member>
        <member name="M:AppFramework.Core.Services.StorageManager.DoesFileExistsAsync(System.String,Windows.Storage.StorageFolder)">
            <summary>
            Checks wether or not a file exists at a specified location.
            </summary>
            <param name="path">Path and name of the file.</param>
            <param name="folder">Location of where the file is stored.</param>
            <returns>True if file exists else False.</returns>
        </member>
        <member name="M:AppFramework.Core.Services.StorageManager.GetToFolderFromPathAsync(System.String,Windows.Storage.StorageFolder,System.Boolean)">
            <summary>
            Gets to a folder object found in a string path.
            </summary>
            <param name="path">Path to evaluate.</param>
            <param name="startingFolder">Starting folder location.</param>
            <param name="createIfNotFound">Create the folder if it doesn't exist.</param>
            <returns>Return a handle to the folder.</returns>
        </member>
        <member name="M:AppFramework.Core.Services.StorageManager.DeleteFolderAsync(System.String,Windows.Storage.StorageFolder)">
            <summary>
            Deletes a specified folder.
            </summary>
            <param name="folderName">Folder name to delete.</param>
            <param name="startingFolder">Starting folder location.</param>
            <returns></returns>
        </member>
        <member name="M:AppFramework.Core.Services.StorageManager.GetFolderSizeAsync(Windows.Storage.StorageFolder,System.String[])">
            <summary>
            Calculates the size of a folder.
            </summary>
            <param name="startingFolder">Starting folder location.</param>
            <param name="folderNames">List of sub folder names to get sizes of.</param>
            <returns>Formatted string displaying the size of the folder.</returns>
        </member>
        <member name="M:AppFramework.Core.Services.StorageManager.SignoutAsync">
            <summary>
            When a user signs out of the app, delete their AppDataCache folder to protect sensitive data from being shown to other users potentially.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AppFramework.Core.Services.VoiceCommandManager.SignoutAsync">
            <summary>
            Clears all items from the voice command definition on user signout.
            </summary>
            <returns>Awaitable task is returned.</returns>
        </member>
        <member name="M:AppFramework.Core.Services.VoiceCommandManager.ClearPhraseListAsync(System.String,System.String,System.String)">
            <summary>
            Clear all phrases for a command set.
            </summary>
            <param name="commandSetName">Name of the command set.</param>
            <param name="phraseListName">Name of the phrase list.</param>
            <param name="countryCode">Country code for the command set.</param>
            <returns>Awaitable task is returned.</returns>
        </member>
        <member name="M:AppFramework.Core.Services.VoiceCommandManager.UpdatePhraseListAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Updates all phrases in a command set.
            </summary>
            <param name="commandSetName">Name of the command set.</param>
            <param name="phraseListName">Name of the phrase list.</param>
            <param name="list">Strings for the phrase list.</param>
            <param name="countryCode">Country code for the command set.</param>
            <returns>Awaitable task is returned.</returns>
        </member>
        <member name="M:AppFramework.Core.Services.WebAccountManager.Show(AppFramework.Core.Services.WebAccountManager.WebAccountManangerSuccessHandler,AppFramework.Core.Services.WebAccountManager.WebAccountManangerFailedHandler)">
            <summary>
            Displays the Web Account Manager for users to chose an account to authenticate with.
            </summary>
            <param name="successHandler">Call back for when an account is successfully choosen by the user.</param>
            <param name="failedHandler">Call back for when an error or cancelled UI occurs by the user.</param>
        </member>
        <member name="M:AppFramework.Core.Services.WebAccountManager.SignoutAsync">
            <summary>
            Signs the current user out of all web accounts.
            </summary>
            <returns>Awaitable task is returned.</returns>
        </member>
        <member name="M:AppFramework.Core.Services.WebAccountManager.Cleanup">
            <summary>
            Clean up after displaying the web account manager.
            </summary>
        </member>
        <member name="M:AppFramework.Core.Services.WebAccountManager.GetWebAccount(AppFramework.Core.Services.WebAccountManager.WebAccountTypes)">
            <summary>
            Gets a web account by type.
            </summary>
            <param name="type">Type enum of the web account.</param>
            <returns>WebAccount instance if found else null.</returns>
        </member>
        <member name="M:AppFramework.Core.Services.WebAccountManager.GetProvider(System.String,System.String)">
            <summary>
            Gets a provider by ID.
            </summary>
            <param name="providerID">ID of the provider.</param>
            <param name="authority">Authority string of the provider.</param>
            <returns>WebAccountProvider instance if found else null.</returns>
        </member>
        <member name="M:AppFramework.Core.Services.WebAccountManager.GetProviderInfo(System.String)">
            <summary>
            Gets a provider info by ID.
            </summary>
            <param name="providerID">ID of the provider.</param>
            <returns>Provider information else null.</returns>
        </member>
        <member name="M:AppFramework.Core.Services.WebAccountManager.GetWebAccountInfo(AppFramework.Core.Services.WebAccountManager.WebAccountTypes)">
            <summary>
            Retrieves an authenticated account details from storage.
            </summary>
            <param name="type"></param>
            <returns>WebAccountInfo instance if found else null.</returns>
        </member>
        <member name="M:AppFramework.Core.Services.WebAccountManager.HasWebAccountInfo(AppFramework.Core.Services.WebAccountManager.WebAccountTypes)">
            <summary>
            Indicates whether or not an account is stored in storage.
            </summary>
            <param name="type">Enum type of the web account to check if stored info exists or not.</param>
            <returns>True if stored info exists else false.</returns>
        </member>
        <member name="M:AppFramework.Core.Services.WebAccountManager.SaveWebAccountInfo(AppFramework.Core.Services.WebAccountManager.WebAccountInfo)">
            <summary>
            Saves an authenticated account to storage.
            </summary>
            <param name="wi">Object containing the web account info.</param>
        </member>
        <member name="M:AppFramework.Core.Services.WebAccountManager.DeleteUsersWebAccountDetails(AppFramework.Core.Services.WebAccountManager.WebAccountTypes)">
            <summary>
            Deletes an authenticated account from storage.
            </summary>
            <param name="type">Enum type representing the web account to delete.</param>
        </member>
        <member name="M:AppFramework.Core.Services.WebAccountManager.SignoutAsync(System.String)">
            <summary>
            Signs a user out of the specified provider.
            </summary>
            <param name="providerID">ID of the provider.</param>
            <returns>Awaitable task is returned.</returns>
        </member>
        <member name="M:AppFramework.Core.Services.WebAccountManager.SignoutAsync(AppFramework.Core.Services.WebAccountManager.WebAccountProviderInfo)">
            <summary>
            Signs a user out of the specified provider.
            </summary>
            <param name="pi">Provider information to sign out from.</param>
            <returns>Awaitable task is returned.</returns>
        </member>
        <member name="T:AppFramework.Core.LogLevels">
            <summary>
            Enumeration describing the level/type of information being logged
            </summary>
        </member>
        <member name="T:AppFramework.Core.LoadStateEventHandler">
            <summary>
            Represents the method that will handle the <see cref="!:NavigationHelper.LoadState"/>event
            </summary>
        </member>
        <member name="T:AppFramework.Core.SaveStateEventHandler">
            <summary>
            Represents the method that will handle the <see cref="!:NavigationHelper.SaveState"/>event
            </summary>
        </member>
        <member name="T:AppFramework.Core.LoadStateEventArgs">
            <summary>
            Class used to hold the event data required when a page attempts to load state.
            </summary>
        </member>
        <member name="P:AppFramework.Core.LoadStateEventArgs.NavigationEventArgs">
            <summary>
            Gets the navigation event args passed to the OnNavigatingTo event of the page.
            </summary>
        </member>
        <member name="P:AppFramework.Core.LoadStateEventArgs.PageState">
            <summary>
            A dictionary of state preserved by this page during an earlier
            session.  This will be null the first time a page is visited.
            </summary>
        </member>
        <member name="M:AppFramework.Core.LoadStateEventArgs.#ctor(Windows.UI.Xaml.Navigation.NavigationEventArgs,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:AppFramework.Core.LoadStateEventArgs"/> class.
            </summary>
            <param name="navigationParameter">
            The parameter value passed to <see cref="M:Windows.UI.Xaml.Controls.Frame.Navigate(System.Type,System.Object)"/> 
            when this page was initially requested.
            </param>
            <param name="pageState">
            A dictionary of state preserved by this page during an earlier
            session.  This will be null the first time a page is visited.
            </param>
        </member>
        <member name="P:AppFramework.Core.LoadStateEventArgs.Parameter">
            <summary>
            Gets the deserialized instance of the parameter passed to this page.
            </summary>
        </member>
        <member name="T:AppFramework.Core.SaveStateEventArgs">
            <summary>
            Class used to hold the event data required when a page attempts to save state.
            </summary>
        </member>
        <member name="P:AppFramework.Core.SaveStateEventArgs.NavigationEventArgs">
            <summary>
            Gets the navigation event args passed to the OnNavigatedFrom event of the page.
            </summary>
        </member>
        <member name="P:AppFramework.Core.SaveStateEventArgs.PageState">
            <summary>
            An empty dictionary to be populated with serializable state.
            </summary>
        </member>
        <member name="M:AppFramework.Core.SaveStateEventArgs.#ctor(Windows.UI.Xaml.Navigation.NavigationEventArgs,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:AppFramework.Core.SaveStateEventArgs"/> class.
            </summary>
            <param name="pageState">An empty dictionary to be populated with serializable state.</param>
        </member>
        <member name="T:AppFramework.UI.Behaviors.EnterKeyBehavior">
            <summary>
            Enables a control to execute its associated command when an enter key press is detected within the control.
            </summary>
        </member>
        <member name="T:AppFramework.UI.Behaviors.FocusOnLoadBehavior">
            <summary>
            Focuses a control on the loaded event.  Useful for setting focus to the first textbox on a page, for example, immediately on load of the page.
            </summary>
        </member>
        <member name="T:AppFramework.UI.Behaviors.ListViewCommandBehavior">
            <summary>
            Creates an attached property for all ListViewBase controls allowing binding  a command object to it's ItemClick event.
            </summary>
        </member>
        <member name="M:AppFramework.UI.Controls.ApplicationFrame.ShowInterstitialAd">
            <summary>
            Displays a banner or video interstitial ad (whichever loads first).
            </summary>
        </member>
        <member name="T:AppFramework.UI.Controls.AdControl">
            <summary>
            Ad control:  https://msdn.microsoft.com/en-us/windows/uwp/monetize/supported-ad-sizes-for-banner-ads
            </summary>
        </member>
        <member name="M:AppFramework.UI.Controls.AdControl.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:AppFramework.UI.Controls.AdControl.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="T:AppFramework.UI.Controls.BodyPanel">
            <summary>
            BodyPanel control representing page chrome.
            </summary>
        </member>
        <member name="M:AppFramework.UI.Controls.BodyPanel.#ctor">
            <summary>
            Constructs an instance of the BodyPanel.
            </summary>
        </member>
        <member name="M:AppFramework.UI.Controls.BodyPanel.OnApplyTemplate">
            <summary>
            Finds controls within the template of this control.
            </summary>
        </member>
        <member name="M:AppFramework.UI.Controls.BodyPanel.ScrollToTop">
            <summary>
            Scrolls the panel to the top.
            </summary>
        </member>
        <member name="T:AppFramework.UI.Controls.ContentControlBase`1">
            <summary>
            Base class for custom controls.  Provides plumbing for view model support and x:Bind just like the ViewBase.
            </summary>
            <typeparam name="TViewModel"></typeparam>
        </member>
        <member name="M:AppFramework.UI.Controls.ContentControlBase`1.SetProperty``1(``0@,``0,System.String)">
            <summary>
            Checks if a property already matches a desired value.  Sets the property and
            notifies listeners only when necessary.
            </summary>
            <typeparam name="T">Type of the property.</typeparam>
            <param name="storage">Reference to a property with both getter and setter.</param>
            <param name="value">Desired value for the property.</param>
            <param name="propertyName">Name of the property used to notify listeners.  This
            value is optional and can be provided automatically when invoked from compilers that
            support CallerMemberName.</param>
            <returns>True if the value was changed, false if the existing value matched the
            desired value.</returns>
        </member>
        <member name="M:AppFramework.UI.Controls.ContentControlBase`1.NotifyPropertyChanged(System.String)">
            <summary>
            Notifies listeners that a property value has changed.
            </summary>
            <param name="propertyName">Name of the property used to notify listeners.  This
            value is optional and can be provided automatically when invoked from compilers
            that support <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute"/>.</param>
        </member>
        <member name="T:AppFramework.UI.Controls.ScrollToTopHelper">
            <summary>
            Helper class to scroll a control or object to its default position.
            </summary>
        </member>
        <member name="M:AppFramework.UI.Controls.ScrollToTopHelper.ScrollToTop(System.Object)">
            <summary>
            Scrolls a control or object that can be scrolled to its default top position.
            </summary>
            <param name="content"></param>
        </member>
        <member name="T:AppFramework.UI.Controls.SplitViewButton">
            <summary>
            User control used in the ShellView page's SplitView control's pane.  Each instance represents a navigation button for the main navigation menu.
            </summary>
        </member>
        <member name="M:AppFramework.UI.Controls.UserControlBase.SetProperty``1(``0@,``0,System.String)">
            <summary>
            Checks if a property already matches a desired value.  Sets the property and
            notifies listeners only when necessary.
            </summary>
            <typeparam name="T">Type of the property.</typeparam>
            <param name="storage">Reference to a property with both getter and setter.</param>
            <param name="value">Desired value for the property.</param>
            <param name="propertyName">Name of the property used to notify listeners.  This
            value is optional and can be provided automatically when invoked from compilers that
            support CallerMemberName.</param>
            <returns>True if the value was changed, false if the existing value matched the
            desired value.</returns>
        </member>
        <member name="M:AppFramework.UI.Controls.UserControlBase.NotifyPropertyChanged(System.String)">
            <summary>
            Notifies listeners that a property value has changed.
            </summary>
            <param name="propertyName">Name of the property used to notify listeners.  This
            value is optional and can be provided automatically when invoked from compilers
            that support <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute"/>.</param>
        </member>
        <member name="T:AppFramework.UI.Controls.ViewControlBase`1">
            <summary>
            Base class for custom controls.  Provides plumbing for view model support and x:Bind just like the ViewBase.
            </summary>
            <typeparam name="TViewModel"></typeparam>
        </member>
        <member name="M:AppFramework.UI.Controls.WebViewPanel.SetCurrentViewModel(AppFramework.Core.ViewModels.WebViewModelBase)">
            <summary>
            Configures a WebBrowserViewModel instance to get notified of WebView control events.
            </summary>
            <param name="vm"></param>
        </member>
        <member name="M:AppFramework.UI.Controls.WebViewPanel.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:AppFramework.UI.Controls.WebViewPanel.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="F:AppFramework.UI.Controls.WrapPanel._ignorePropertyChange">
            <summary>
            A value indicating whether a dependency property change handler
            should ignore the next change notification.  This is used to reset
            the value of properties without performing any of the actions in
            their change handlers.
            </summary>
        </member>
        <member name="P:AppFramework.UI.Controls.WrapPanel.ItemHeight">
            <summary>
            Gets or sets the height of the layout area for each item that is
            contained in a <see cref="T:AppFramework.UI.Controls.WrapPanel" />.
            </summary>
            <value>
            The height applied to the layout area of each item that is contained
            within a <see cref="T:AppFramework.UI.Controls.WrapPanel" />.  The
            default value is <see cref="F:System.Double.NaN" />.
            </value>
        </member>
        <member name="F:AppFramework.UI.Controls.WrapPanel.ItemHeightProperty">
            <summary>
            Identifies the
            <see cref="P:AppFramework.UI.Controls.WrapPanel.ItemHeight" />
            dependency property.
            </summary>
            <value>
            The identifier for the
            <see cref="P:AppFramework.UI.Controls.WrapPanel.ItemHeight" />
            dependency property
            </value>
        </member>
        <member name="P:AppFramework.UI.Controls.WrapPanel.ItemWidth">
            <summary>
            Gets or sets the width of the layout area for each item that is
            contained in a <see cref="T:AppFramework.UI.Controls.WrapPanel" />.
            </summary>
            <value>
            The width that applies to the layout area of each item that is
            contained in a <see cref="T:AppFramework.UI.Controls.WrapPanel" />.
            The default value is <see cref="F:System.Double.NaN" />.
            </value>
        </member>
        <member name="F:AppFramework.UI.Controls.WrapPanel.ItemWidthProperty">
            <summary>
            Identifies the
            <see cref="P:AppFramework.UI.Controls.WrapPanel.ItemWidth" />
            dependency property.
            </summary>
            <value>
            The identifier for the
            <see cref="P:AppFramework.UI.Controls.WrapPanel.ItemWidth" />
            dependency property.
            </value>
        </member>
        <member name="P:AppFramework.UI.Controls.WrapPanel.Orientation">
            <summary>
            Gets or sets the direction in which child elements are arranged.
            </summary>
            <value>
            One of the <see cref="T:Windows.UI.Xaml.Controls.Orientation" />
            values.  The default is
            <see cref="F:Windows.UI.Xaml.Controls.Orientation.Horizontal" />.
            </value>
        </member>
        <member name="F:AppFramework.UI.Controls.WrapPanel.OrientationProperty">
            <summary>
            Identifies the
            <see cref="P:AppFramework.UI.Controls.WrapPanel.Orientation" />
            dependency property.
            </summary>
            <value>
            The identifier for the
            <see cref="P:AppFramework.UI.Controls.WrapPanel.Orientation" />
            dependency property.
            </value>
        </member>
        <member name="M:AppFramework.UI.Controls.WrapPanel.OnOrientationPropertyChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            OrientationProperty property changed handler.
            </summary>
            <param name="d">WrapPanel that changed its Orientation.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:AppFramework.UI.Controls.WrapPanel.OnItemHeightOrWidthPropertyChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Property changed handler for ItemHeight and ItemWidth.
            </summary>
            <param name="d">
            WrapPanel that changed its ItemHeight or ItemWidth.
            </param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:AppFramework.UI.Controls.WrapPanel.MeasureOverride(Windows.Foundation.Size)">
            <summary>
            Measures the child elements of a
            <see cref="T:AppFramework.UI.Controls.WrapPanel" /> in anticipation
            of arranging them during the
            <see cref="M:AppFramework.UI.Controls.WrapPanel.ArrangeOverride(Windows.Foundation.Size)" />
            pass.
            </summary>
            <param name="constraint">
            The size available to child elements of the wrap panel.
            </param>
            <returns>
            The size required by the
            <see cref="T:AppFramework.UI.Controls.WrapPanel" /> and its 
            elements.
            </returns>
        </member>
        <member name="M:AppFramework.UI.Controls.WrapPanel.ArrangeOverride(Windows.Foundation.Size)">
            <summary>
            Arranges and sizes the
            <see cref="T:AppFramework.UI.Controls.WrapPanel" /> control and its
            child elements.
            </summary>
            <param name="finalSize">
            The area within the parent that the
            <see cref="T:AppFramework.UI.Controls.WrapPanel" /> should use 
            arrange itself and its children.
            </param>
            <returns>
            The actual size used by the
            <see cref="T:AppFramework.UI.Controls.WrapPanel" />.
            </returns>
        </member>
        <member name="M:AppFramework.UI.Controls.WrapPanel.ArrangeLine(System.Int32,System.Int32,System.Nullable{System.Double},System.Double,System.Double)">
            <summary>
            Arrange a sequence of elements in a single line.
            </summary>
            <param name="lineStart">
            Index of the first element in the sequence to arrange.
            </param>
            <param name="lineEnd">
            Index of the last element in the sequence to arrange.
            </param>
            <param name="directDelta">
            Optional fixed growth in the primary direction.
            </param>
            <param name="indirectOffset">
            Offset of the line in the indirect direction.
            </param>
            <param name="indirectGrowth">
            Shared indirect growth of the elements on this line.
            </param>
        </member>
        <member name="F:AppFramework.UI.Controls.OrientedSize._orientation">
            <summary>
            The orientation of the structure.
            </summary>
        </member>
        <member name="P:AppFramework.UI.Controls.OrientedSize.Orientation">
            <summary>
            Gets the orientation of the structure.
            </summary>
        </member>
        <member name="F:AppFramework.UI.Controls.OrientedSize._direct">
            <summary>
            The size dimension that grows directly with layout placement.
            </summary>
        </member>
        <member name="P:AppFramework.UI.Controls.OrientedSize.Direct">
            <summary>
            Gets or sets the size dimension that grows directly with layout
            placement.
            </summary>
        </member>
        <member name="F:AppFramework.UI.Controls.OrientedSize._indirect">
            <summary>
            The size dimension that grows indirectly with the maximum value of
            the layout row or column.
            </summary>
        </member>
        <member name="P:AppFramework.UI.Controls.OrientedSize.Indirect">
            <summary>
            Gets or sets the size dimension that grows indirectly with the
            maximum value of the layout row or column.
            </summary>
        </member>
        <member name="P:AppFramework.UI.Controls.OrientedSize.Width">
            <summary>
            Gets or sets the width of the size.
            </summary>
        </member>
        <member name="P:AppFramework.UI.Controls.OrientedSize.Height">
            <summary>
            Gets or sets the height of the size.
            </summary>
        </member>
        <member name="M:AppFramework.UI.Controls.OrientedSize.#ctor(Windows.UI.Xaml.Controls.Orientation)">
            <summary>
            Initializes a new OrientedSize structure.
            </summary>
            <param name="orientation">Orientation of the structure.</param>
        </member>
        <member name="M:AppFramework.UI.Controls.OrientedSize.#ctor(Windows.UI.Xaml.Controls.Orientation,System.Double,System.Double)">
            <summary>
            Initializes a new OrientedSize structure.
            </summary>
            <param name="orientation">Orientation of the structure.</param>
            <param name="width">Un-oriented width of the structure.</param>
            <param name="height">Un-oriented height of the structure.</param>
        </member>
        <member name="T:AppFramework.UI.Controls.NumericExtensions.NanUnion">
            <summary>
            NanUnion is a C++ style type union used for efficiently converting
            a double into an unsigned long, whose bits can be easily
            manipulated.
            </summary>
        </member>
        <member name="F:AppFramework.UI.Controls.NumericExtensions.NanUnion.FloatingValue">
            <summary>
            Floating point representation of the union.
            </summary>
        </member>
        <member name="F:AppFramework.UI.Controls.NumericExtensions.NanUnion.IntegerValue">
            <summary>
            Integer representation of the union.
            </summary>
        </member>
        <member name="M:AppFramework.UI.Controls.NumericExtensions.IsNaN(System.Double)">
            <summary>
            Check if a number isn't really a number.
            </summary>
            <param name="value">The number to check.</param>
            <returns>
            True if the number is not a number, false if it is a number.
            </returns>
        </member>
        <member name="M:AppFramework.UI.Controls.NumericExtensions.IsGreaterThan(System.Double,System.Double)">
            <summary>
            Determine if one number is greater than another.
            </summary>
            <param name="left">First number.</param>
            <param name="right">Second number.</param>
            <returns>
            True if the first number is greater than the second, false
            otherwise.
            </returns>
        </member>
        <member name="M:AppFramework.UI.Controls.NumericExtensions.AreClose(System.Double,System.Double)">
            <summary>
            Determine if two numbers are close in value.
            </summary>
            <param name="left">First number.</param>
            <param name="right">Second number.</param>
            <returns>
            True if the first number is close in value to the second, false
            otherwise.
            </returns>
        </member>
        <member name="M:AppFramework.UI.Views.SecondaryWindowView.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:AppFramework.UI.Views.SecondaryWindowView.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:AppFramework.UI.Views.WebView.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:AppFramework.UI.Views.WebView.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="T:AppFramework.UI.Views.ViewBase`1">
            <summary>
            Base class for all pages in your application.
            </summary>
            <typeparam name="TViewModel"></typeparam>
        </member>
        <member name="P:AppFramework.UI.Views.ViewBase`1.ViewModel">
            <summary>
            Gets access to the view model instance associated to this page. Used for x:Bind capabilities in the page's XAML.
            </summary>
        </member>
        <member name="P:AppFramework.UI.Views.ViewBase`1.IsInView">
            <summary>
            True if the view is visible to the user else false.
            </summary>
        </member>
        <member name="E:AppFramework.UI.Views.ViewBase`1.PropertyChanged">
            <summary>
            Event for knowing when page properties change.
            </summary>
        </member>
        <member name="M:AppFramework.UI.Views.ViewBase`1.OnNavigatedTo(Windows.UI.Xaml.Navigation.NavigationEventArgs)">
            <summary>
            The methods provided in this section are simply used to allow
            NavigationHelper to respond to the page's navigation methods.
            <para>
            Page specific logic should be placed in event handlers for the
            <see cref="!:NavigationHelper.LoadState"/>
            and <see cref="!:NavigationHelper.SaveState"/>.
            The navigation parameter is available in the LoadState method
            in addition to page state preserved during an earlier session.
            </para>
            </summary>
            <param name="e">Event data that describes how this page was reached.</param>
        </member>
        <member name="M:AppFramework.UI.Views.ViewBase`1.OnLoadStateAsync(AppFramework.Core.LoadStateEventArgs)">
            <summary>
            Populates the page with content passed during navigation.  Any saved state is also
            provided when recreating a page from a prior session.
            </summary>
            <param name="e">Event data that provides both the navigation parameter passed to
            <see cref="M:Windows.UI.Xaml.Controls.Frame.Navigate(System.Type,System.Object)"/> when this page was initially requested and
            a dictionary of state preserved by this page during an earlier
            session.  The state will be null the first time a page is visited.</param>
        </member>
        <member name="M:AppFramework.UI.Views.ViewBase`1.OnSaveStateAsync(AppFramework.Core.SaveStateEventArgs)">
            <summary>
            Preserves state associated with this page in case the application is suspended or the
            page is discarded from the navigation cache.  Values must conform to the serialization
            requirements of <see cref="P:AppFramework.UI.SuspensionManager.SessionState"/>.
            </summary>
            <param name="e">Event data that provides an empty dictionary to be populated with
            serializable state.</param>
        </member>
        <member name="M:AppFramework.UI.Views.ViewBase`1.Application_Resuming(System.Object,System.Object)">
            <summary>
            Event handler for application resume
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AppFramework.UI.Views.ViewBase`1.OnApplicationResuming">
            <summary>
            Perform any custom logic for when the OS resumes your app.
            </summary>
        </member>
        <member name="M:AppFramework.UI.Views.ViewBase`1.OnForwardNavigationRequested">
            <summary>
            Allows a view to prevent forward navigation if it needs to.
            </summary>
            <returns>True if forward navigation should be cancelled else false.</returns>
        </member>
        <member name="M:AppFramework.UI.Views.ViewBase`1.OnBackNavigationRequested">
            <summary>
            Allows a view to prevent back navigation if it needs to.
            </summary>
            <returns>True if back navigation should be cancelled else false.</returns>
        </member>
        <member name="M:AppFramework.UI.Views.ViewBase`1.SetViewModel(`0)">
            <summary>
            Sets a view model instance to the page for data binding and for x:Bind.
            </summary>
            <param name="vm"></param>
        </member>
        <member name="M:AppFramework.UI.Views.ViewBase`1.SetProperty``1(``0@,``0,System.String)">
            <summary>
            Checks if a property already matches a desired value.  Sets the property and
            notifies listeners only when necessary.
            </summary>
            <typeparam name="T">Type of the property.</typeparam>
            <param name="storage">Reference to a property with both getter and setter.</param>
            <param name="value">Desired value for the property.</param>
            <param name="propertyName">Name of the property used to notify listeners.  This
            value is optional and can be provided automatically when invoked from compilers that
            support CallerMemberName.</param>
            <returns>True if the value was changed, false if the existing value matched the
            desired value.</returns>
        </member>
        <member name="M:AppFramework.UI.Views.ViewBase`1.NotifyPropertyChanged(System.String)">
            <summary>
            Notifies listeners that a property value has changed.
            </summary>
            <param name="propertyName">Name of the property used to notify listeners.  This
            value is optional and can be provided automatically when invoked from compilers
            that support <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute"/>.</param>
        </member>
        <member name="T:AppFramework.UI.App">
            <summary>
            Provides application-specific behavior to supplement the default Application class.
            </summary>
        </member>
        <member name="M:AppFramework.UI.App.#ctor">
            <summary>
            Initializes the singleton application object.  This is the first line of authored code
            executed, and as such is the logical equivalent of main() or WinMain().
            </summary>
        </member>
        <member name="M:AppFramework.UI.App.OnLaunched(Windows.ApplicationModel.Activation.LaunchActivatedEventArgs)">
            <summary>
            Invoked when the application is launched normally by the end user.  Other entry points
            will be used such as when the application is launched to open a specific file.
            </summary>
            <param name="e">Details about the launch request and process.</param>
        </member>
        <member name="M:AppFramework.UI.App.OnSuspending(System.Object,Windows.ApplicationModel.SuspendingEventArgs)">
            <summary>
            Invoked when application execution is being suspended.  Application state is saved
            without knowing whether the application will be terminated or resumed with the contents
            of memory still intact.
            </summary>
            <param name="sender">The source of the suspend request.</param>
            <param name="e">Details about the suspend request.</param>
        </member>
        <member name="M:AppFramework.UI.App.App_UnhandledException(System.Object,Windows.UI.Xaml.UnhandledExceptionEventArgs)">
            <summary>
            Invoked when an unhandled exception in the application occurs
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AppFramework.UI.App.TaskScheduler_UnobservedTaskException(System.Object,System.Threading.Tasks.UnobservedTaskExceptionEventArgs)">
            <summary>
            Invoked when the task schedule sees an exception occur
            </summary>
            <param name="sender"></param>
            <param name="e">Details about the task exception.</param>
        </member>
        <member name="M:AppFramework.UI.App.DebugSettings_BindingFailed(System.Object,Windows.UI.Xaml.BindingFailedEventArgs)">
            <summary>
            Invoked when any bindings fail.
            </summary>
            <param name="sender">Object which failed with binding</param>
            <param name="e">Details about the binding failure</param>
        </member>
        <member name="M:AppFramework.UI.App.OnNavigationFailed(System.Object,Windows.UI.Xaml.Navigation.NavigationFailedEventArgs)">
            <summary>
            Invoked when Navigation to a certain page fails
            </summary>
            <param name="sender">The Frame which failed navigation</param>
            <param name="e">Details about the navigation failure</param>
        </member>
        <member name="M:AppFramework.UI.Resources.PlatformSpecific.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:AppFramework.UI.Resources.PlatformSpecific.InitializeComponent(System.Uri)">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:AppFramework.UI.Resources.PlatformSpecific.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:AppFramework.UI.Resources.Common.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:AppFramework.UI.Resources.Common.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="T:AppFramework.UI.SuspensionManager">
            <summary>
            SuspensionManager captures global session state to simplify process lifetime management
            for an application.  Note that session state will be automatically cleared under a variety
            of conditions and should only be used to store information that would be convenient to
            carry across sessions, but that should be discarded when an application crashes or is
            upgraded.
            </summary>
        </member>
        <member name="P:AppFramework.UI.SuspensionManager.SessionState">
            <summary>
            Provides access to global session state for the current session.  This state is
            serialized by <see cref="M:AppFramework.UI.SuspensionManager.SaveAsync"/> and restored by
            <see cref="M:AppFramework.UI.SuspensionManager.RestoreAsync(System.String)"/>, so values must be serializable by
            <see cref="T:System.Runtime.Serialization.DataContractSerializer"/> and should be as compact as possible.  Strings
            and other self-contained data types are strongly recommended.
            </summary>
        </member>
        <member name="P:AppFramework.UI.SuspensionManager.KnownTypes">
            <summary>
            List of custom types provided to the <see cref="T:System.Runtime.Serialization.DataContractSerializer"/> when
            reading and writing session state.  Initially empty, additional types may be
            added to customize the serialization process.
            </summary>
        </member>
        <member name="M:AppFramework.UI.SuspensionManager.SaveAsync">
            <summary>
            Save the current <see cref="P:AppFramework.UI.SuspensionManager.SessionState"/>.  Any <see cref="T:Windows.UI.Xaml.Controls.Frame"/> instances
            registered with <see cref="M:AppFramework.UI.SuspensionManager.RegisterFrame(Windows.UI.Xaml.Controls.Frame,System.String,System.String)"/> will also preserve their current
            navigation stack, which in turn gives their active <see cref="T:Windows.UI.Xaml.Controls.Page"/> an opportunity
            to save its state.
            </summary>
            <returns>An asynchronous task that reflects when session state has been saved.</returns>
        </member>
        <member name="M:AppFramework.UI.SuspensionManager.RestoreAsync(System.String)">
            <summary>
            Restores previously saved <see cref="P:AppFramework.UI.SuspensionManager.SessionState"/>.  Any <see cref="T:Windows.UI.Xaml.Controls.Frame"/> instances
            registered with <see cref="M:AppFramework.UI.SuspensionManager.RegisterFrame(Windows.UI.Xaml.Controls.Frame,System.String,System.String)"/> will also restore their prior navigation
            state, which in turn gives their active <see cref="T:Windows.UI.Xaml.Controls.Page"/> an opportunity restore its
            state.
            </summary>
            <param name="sessionBaseKey">An optional key that identifies the type of session.
            This can be used to distinguish between multiple application launch scenarios.</param>
            <returns>An asynchronous task that reflects when session state has been read.  The
            content of <see cref="P:AppFramework.UI.SuspensionManager.SessionState"/> should not be relied upon until this task
            completes.</returns>
        </member>
        <member name="M:AppFramework.UI.SuspensionManager.RegisterFrame(Windows.UI.Xaml.Controls.Frame,System.String,System.String)">
            <summary>
            Registers a <see cref="T:Windows.UI.Xaml.Controls.Frame"/> instance to allow its navigation history to be saved to
            and restored from <see cref="P:AppFramework.UI.SuspensionManager.SessionState"/>.  Frames should be registered once
            immediately after creation if they will participate in session state management.  Upon
            registration if state has already been restored for the specified key
            the navigation history will immediately be restored.  Subsequent invocations of
            <see cref="M:AppFramework.UI.SuspensionManager.RestoreAsync(System.String)"/> will also restore navigation history.
            </summary>
            <param name="frame">An instance whose navigation history should be managed by
            <see cref="T:AppFramework.UI.SuspensionManager"/></param>
            <param name="sessionStateKey">A unique key into <see cref="P:AppFramework.UI.SuspensionManager.SessionState"/> used to
            store navigation-related information.</param>
            <param name="sessionBaseKey">An optional key that identifies the type of session.
            This can be used to distinguish between multiple application launch scenarios.</param>
        </member>
        <member name="M:AppFramework.UI.SuspensionManager.UnregisterFrame(Windows.UI.Xaml.Controls.Frame)">
            <summary>
            Disassociates a <see cref="T:Windows.UI.Xaml.Controls.Frame"/> previously registered by <see cref="M:AppFramework.UI.SuspensionManager.RegisterFrame(Windows.UI.Xaml.Controls.Frame,System.String,System.String)"/>
            from <see cref="P:AppFramework.UI.SuspensionManager.SessionState"/>.  Any navigation state previously captured will be
            removed.
            </summary>
            <param name="frame">An instance whose navigation history should no longer be
            managed.</param>
        </member>
        <member name="M:AppFramework.UI.SuspensionManager.SessionStateForFrame(Windows.UI.Xaml.Controls.Frame)">
            <summary>
            Provides storage for session state associated with the specified <see cref="T:Windows.UI.Xaml.Controls.Frame"/>.
            Frames that have been previously registered with <see cref="M:AppFramework.UI.SuspensionManager.RegisterFrame(Windows.UI.Xaml.Controls.Frame,System.String,System.String)"/> have
            their session state saved and restored automatically as a part of the global
            <see cref="P:AppFramework.UI.SuspensionManager.SessionState"/>.  Frames that are not registered have transient state
            that can still be useful when restoring pages that have been discarded from the
            navigation cache.
            </summary>
            <remarks>Apps may choose to rely on <see cref="!:NavigationHelper"/> to manage
            page-specific state instead of working with frame session state directly.</remarks>
            <param name="frame">The instance for which session state is desired.</param>
            <returns>A collection of state subject to the same serialization mechanism as
            <see cref="P:AppFramework.UI.SuspensionManager.SessionState"/>.</returns>
        </member>
        <member name="T:AppFramework.UI.Triggers.ContinuumMobileAvailableTrigger">
            <summary>
            Trigger for determinging when continuum on Windows Mobile is available for consumption.
            </summary>
        </member>
        <member name="T:AppFramework.UI.Triggers.ContinuumMobileExecutingTrigger">
            <summary>
            Trigger to indicate when a window is displayed on a Windows Mobile continuum screen.
            </summary>
        </member>
        <member name="T:AppFramework.UI.Triggers.DeviceFamilyTrigger">
            <summary>
            Trigger for when you need do perform device specific customizations.
            </summary>
        </member>
        <member name="T:AppFramework.UI.Triggers.NotDeviceFamilyTrigger">
            <summary>
            Trigger for when you need do perform specific customizations NOT on the specified device family.
            </summary>
        </member>
        <member name="T:AppFramework.UI.Triggers.TabletModeTrigger">
            <summary>
            Trigger to determine when a user enters tablet mode.
            </summary>
        </member>
        <member name="M:AppFramework.AppFramework_Uwp_XamlTypeInfo.XamlMetaDataProvider.GetXamlType(System.Type)">
            <summary>
            GetXamlType(Type)
            </summary>
        </member>
        <member name="M:AppFramework.AppFramework_Uwp_XamlTypeInfo.XamlMetaDataProvider.GetXamlType(System.String)">
            <summary>
            GetXamlType(String)
            </summary>
        </member>
        <member name="M:AppFramework.AppFramework_Uwp_XamlTypeInfo.XamlMetaDataProvider.GetXmlnsDefinitions">
            <summary>
            GetXmlnsDefinitions()
            </summary>
        </member>
        <member name="M:WebProviderErrorExtensions.ToException(Windows.Security.Authentication.Web.Core.WebProviderError)">
            <summary>
            Converts a WebProviderError into an Exception.
            </summary>
            <param name="element"></param>
            <returns>Exception instance.</returns>
        </member>
        <member name="M:DependencyObjectExtensions.GetDescendantByName(Windows.UI.Xaml.DependencyObject,System.String)">
            <summary>
            Finds a child object by name.
            </summary>
            <param name="element"></param>
            <param name="name"></param>
            <returns>DependencyObject instance with the name specified else null.</returns>
        </member>
        <member name="M:DependencyObjectExtensions.GetAncestorByType(Windows.UI.Xaml.DependencyObject,System.Type)">
            <summary>
            Finds a parent object by type.
            </summary>
            <param name="element"></param>
            <param name="type"></param>
            <returns>DependencyObject instance if found else null.</returns>
        </member>
        <member name="M:DependencyObjectExtensions.GetFirstAncestorByType``1(System.Object,System.Object)">
            <summary>
            Finds a parent object by type.
            </summary>
            <typeparam name="T">Type of the ancestor to find.</typeparam>
            <param name="child">Object whose tree to search.</param>
            <param name="stopAtAncestor"></param>
            <returns>Instance of the object with matching type if found else null.</returns>
        </member>
        <member name="M:DependencyObjectExtensions.GetDescendantByType(Windows.UI.Xaml.DependencyObject,System.Type)">
            <summary>
            Finds a child by type.
            </summary>
            <param name="element"></param>
            <param name="type"></param>
            <returns>DependencyObject instance if found else null</returns>
        </member>
    </members>
</doc>
